{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/191",
    "result": {"data":{"issuesJson":{"id":"6e23fb9e-82ac-55bf-ab2a-df9724670344","title":"allinurl/goaccess: 一款开源的实时 Web 日志分析器和交互式查看器，可在 unix 系统的 终端或浏览器中运行。","number":191,"bodyHTML":"<div align=\"center\" dir=\"auto\">\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a><br><br></p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th align=\"right\">Repos</th>\n<th align=\"left\"><a href=\"https://github.com/allinurl/goaccess\">allinurl/goaccess</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><strong>Views</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/cc690aaf0f4d935e9ea10457f97a8a5ce886836141816fb99b7465eac46de3ca/68747470733a2f2f76696577732e77686174696c656172656e65642e746f6461792f76696577732f6769746875622f616c6c696e75726c2f676f6163636573732e737667\" alt=\"views\" data-canonical-src=\"https://views.whatilearened.today/views/github/allinurl/goaccess.svg\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Stars</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/9adc95a964dd0f9fa26a7f2363790988917d788f8ee46a2e2f0552444698431d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f616c6c696e75726c2f676f6163636573733f636f6c6f723d663266303864266c6f676f3d556e64657274616c65266c6f676f436f6c6f723d656234363330\" alt=\"stars\" data-canonical-src=\"https://img.shields.io/github/stars/allinurl/goaccess?color=f2f08d&amp;logo=Undertale&amp;logoColor=eb4630\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Forks</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/f16960a5e85ee65c7d135805588ebe9340a5250da613d1d8869800e98a3dc117/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f616c6c696e75726c2f676f6163636573733f636f6c6f723d626138366562266c6f676f3d48616e647368616b65266c6f676f436f6c6f723d656136616136\" alt=\"forks\" data-canonical-src=\"https://img.shields.io/github/forks/allinurl/goaccess?color=ba86eb&amp;logo=Handshake&amp;logoColor=ea6aa6\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>License</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/11220436530222b10cf2005ab7aa053e62378b78eebd74f99aa462bb7aa85d38/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616c6c696e75726c2f676f6163636573733f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e53556845556741414144414141414177434159414141425841766d48414141414358424957584d41414173544141414c457745416d70775941414144336b6c45515652346e4f335953557a5555426748384a726f57567255474a66456d3773584e63534446784d544c327069347348456778654e526f77586770455742445552522532424e414e4f4b4f4b36366f6f4b4a4742586545475263574163455646475152484677516d483525324630774861655748493944554455354c356b6e6568644f62377a66652532423139636e434a47495243516945596c514237594a4979474c38616f73756c565a36695246516a69474b6b7564576735614c6c704f70704e586e665071773555304459524a6d56786a4367464633424c755a476d416f5655694b4541726d583744375553677351706f72674761336748664b34483663754262435644334771683141352532424c6745253242467749656e514d306a6f446f66714c6f48564e7742796d384370546e416d327a51713073676478624964515a556c416b7150415a3664676a303541446f59526f6f66792532466f5869726f376b3551586a4c6f70677a4b69514e6c4c4461716f4967754577426a7a7150355066446a45394479495879493633464d547751464d43567271774e61763451666f52673538514625324266724d485172454b3844546f434d714e4179574e4866786d54526f4c4f726d5352566747744466714345715a4f4851727a6f34706243557341333431365169364551394b476a6345465267484f724f4b6e5536574162396247455459656b4b7843766a546167394534706a653534446b3551503862624d4859762532464333756541654a6b50304f4778422532424a70426e4172595238455951516e6f4e31414e4661426e5050356c385372736559514c303641646b30464a5938484f5761424d6c6541486a683068506f73497a6c6f3876304125324633345a694f6548726130714b52504d5653493774762532423932747725324676687855654252713456454c674d376642714b354770526d6f514c584e7075625475367a6f4e52706754386e5051627138347764253246494375767978694b4871694e41664933774d367549684271476b4c696977414f734b44714f68743749747239567938536a52424557667941627225324668523142667056514664484a42253246423268683778376a36517077435665655951326b72554235436c636a3641326d3067576a25324244306d4c34397a573563517943484c4e37726a6c6d6d6174457958582532464372547a412532466f51785a6b576c39474a5443566f25324279546a3837253242346769504b6376307149486f344156344430565a727251493334706e70524d36357875652532467a417265453425324654253246536f676c664542794d7369517441546c4c3352414a355948725378365a44665337307337754d486842705225324659423573305057366f455270316236253246667252684b3353444c35546965364f515548516c5133735644752532427a50636b397657453973747225324236496a533967486d5750616861444a25324277434b364e494242587348423948796b587378774470686c436d416476706c6162554a4e6e5a504239342532464e7436784f6538587a4562503257684d335741673147756236744825324233513150673337365239713475716c6e6f36676448476a444f5139306562303141484d3672596975554a314f713472344656756a35765239427a4d3957674e764f7977446869495951467667626366774166774d764863615067425041253246447948476a50624e394138616d6562636477416444354e6633373574787165774e5552656f797677424958594c645170576c6877465771745061435044334173467541535636717171496c62304a766b564331464c39576b4c55556c55574b337a585a4c46432532423125324642726f46746f364f7358497545594a5034447a7a5732594656316f4a614141414141456c46546b5375516d4343\" alt=\"license\" data-canonical-src=\"https://img.shields.io/github/license/allinurl/goaccess?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAD3klEQVR4nO3YSUzUUBgH8JroWVrUGJfEm7sXNcSDFxMTL2pi4sHEgxeNRowXgpEWBDURR%2BNANOKOK66ooKJGBXeEGRcWAcEVFGQRHFwQmH5%2F0wHaeWHI9DUDU5L5knehdOb7zfe%2B19cnCJGIRCQiEYlQB7YJIyGL8aosulVZ6iRFQjiGKkudWg5aLlpOppNXnfPqw5U0DYRJmVxjCgFF3BLuZGmAoVUiKEArmX7D7USgsQporgGa3gHfK4H6cuBbCVD3Gqh1A5%2BLgE%2BFwIenQM0joDofqLoHVNwBym8CpTnAm2zQq0sgdxbIdQZUlAkqPAZ6dgj05ADoYRoofy%2FoXiro7k5QXjLopgzKiQNlLDaqoIguEwBjzqP5PfDjE9DyIXyI63FMTwQFMCVrqwNav4QfoRg58QF%2BfrMHQrEK8DToCMqNAyWNHfxmTRoLOrmSRVgGtDfqCEqZOHQrzo4pbCUsA3416Qi6EQ9KGjcEFRgHOrOKnU6WAb9bGETYekKxCvjTag9E4pje54Dk5QP8bbMHYv%2FC3ueAeJkP0OGxB%2BJpBnArYR8EYQQnoN1ANFaBnPP5l8SrseYQL06Adk0FJY8HOWaBMleAHjh0hPosIzlo8v0A%2F34ZiOeHra0qKRPMVSI7tv%2B92tw%2FvhxUeBRq4VELgM7fBqK5GpRmoQLXNpubTu6zoNRpgT8nPQbq84wd%2FICuvyxiKHqiNAfI3wM6uIhBqGkLiiwAOsKDqOht7Itr9Vy8SjRBEWfyAbr%2FhR1BfpVQFdHJB%2FB2hh7x7j6QpwCVeeYQ2krUB5Clcj6A2m0gWj%2BD0mL49zW5cQyCHLN7rjlmmatEyXX%2FCrTzA%2FoQxZkWl9GJTCVo%2ByTj87%2B4giPKcv0qIHo4AV4D0VZrrQI34pnpRM65xue%2FzAreE4%2FT%2FSoglfEByMsiQtATlL3RAJ5YHrSx6ZDfS70s7uMHhBpR%2FYB5s0PW6oERp1b6%2FfrRhK3SDL5Tie6OQUHQlQ3sVDu%2BzPck9vWE9str%2B6IjS9gHmWPahaDJ%2BwCK6NIBBXsHB9HykXsxwDphlCmAdvplabUJNnZPB94%2FNt6xOe8XzEbP2WhM3WAg1Gub6tH%2B3Q1Pg376R9q4uqlno6gdHGjDOQ90eb01AHM6rYiuUJ1Oq4r4FVuj5vR9BzM9WgNvOywDhiIYQFvgbcfwAfwMvHcaPgBPA%2FDyHGjPbN9A8amebcdwAdD5Nf375txqewNUReoyvwBIXYLdQpWlhwFWqtPaCPD3AsFuASV6qqqIlb0JvkVC1FL9WkLUUlUWK3zXZLFC%2B1%2FBroFto6OsXIuEYJP4DzzW2YFV1oJaAAAAAElFTkSuQmCC\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>UpdatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/6dee6abcad122ba587521a1d77576ddb2018989ea59484c84fcf823d1bc80038/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f616c6c696e75726c2f676f6163636573733f646973706c61795f74696d657374616d703d636f6d6d6974746572266c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d557064617465644174\" alt=\"last-commit\" data-canonical-src=\"https://img.shields.io/github/last-commit/allinurl/goaccess?display_timestamp=committer&amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=UpdatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>CreatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/9912241e819ec8323c998c0b79c245700ec8c4685b6675f0a8f7476d2b9db17a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f637265617465642d61742f616c6c696e75726c2f676f6163636573733f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d437265617465644174\" alt=\"create-at\" data-canonical-src=\"https://img.shields.io/github/created-at/allinurl/goaccess?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=CreatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<a href=\"https://github.com/opsre/awesome-ops\">\n</a><p dir=\"auto\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/b964a36ea4078c39f603d46a29436371c7541a2f26e0228d7b21b9d9805b43d3/68747470733a2f2f736f6369616c6966792e6769742e63692f6f707372652f617765736f6d652d6f70732f696d6167653f6465736372697074696f6e3d3126666f6e743d42697474657226666f726b733d31266973737565733d31266c616e67756167653d31266c6f676f3d6874747073253341253246253246617661746172732e67697468756275736572636f6e74656e742e636f6d25324675253246313838353638303230266e616d653d31266f776e65723d31267061747465726e3d436972637569742b426f6172642670756c6c733d31267374617267617a6572733d31267468656d653d4c69676874\" alt=\"\" data-canonical-src=\"https://socialify.git.ci/opsre/awesome-ops/image?description=1&amp;font=Bitter&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F188568020&amp;name=1&amp;owner=1&amp;pattern=Circuit+Board&amp;pulls=1&amp;stargazers=1&amp;theme=Light\" style=\"max-width: 100%;\"></a></p>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a>\n</div>\n<h1 dir=\"auto\">GoAccess <a href=\"https://github.com/allinurl/goaccess/actions/workflows/build-test.yml\"><img src=\"https://github.com/allinurl/goaccess/actions/workflows/build-test.yml/badge.svg\" alt=\"C build\" style=\"max-width: 100%;\"></a> <a href=\"https://goaccess.io\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1d8e1ecaba69287d69883ac3017fc96c6c7cb53260186077acb9ff693fd26dd8/68747470733a2f2f676f6163636573732e696f2f6261646765\" alt=\"GoAccess\" data-canonical-src=\"https://goaccess.io/badge\" style=\"max-width: 100%;\"></a></h1>\n<h2 dir=\"auto\">What is it?</h2>\n<p dir=\"auto\">GoAccess is an open source <strong>real-time web log analyzer</strong> and interactive<br>\nviewer that runs in a <strong>terminal</strong> on *nix systems or through your<br>\n<strong>browser</strong>. It provides <strong>fast</strong> and valuable HTTP statistics for system<br>\nadministrators that require a visual server report on the fly.<br>\nMore info at: <a href=\"https://goaccess.io/?src=gh\" rel=\"nofollow\">https://goaccess.io</a>.</p>\n<p dir=\"auto\"><a href=\"https://goaccess.io/\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/f25e79b0746bc4a501009b61213e698cf0cb2ce895c727a60f555d3196c4379d/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d7465726d2d67682e706e673f32303232303131393031\" alt=\"GoAccess Terminal Dashboard\" data-canonical-src=\"https://goaccess.io/images/goaccess-real-time-term-gh.png?2022011901\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://rt.goaccess.io/?src=gh\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/44c8952a4488c9ce3cd05c63c6c35b9be63d4422e9b4e9671bd3b2a5ed03d5be/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d68746d6c2d67682e706e673f323032323031313930\" alt=\"GoAccess HTML Dashboard\" data-canonical-src=\"https://goaccess.io/images/goaccess-real-time-html-gh.png?202201190\" style=\"max-width: 100%;\"></a></p>\n<h2 dir=\"auto\">Features</h2>\n<p dir=\"auto\">GoAccess parses the specified web log file and outputs the data to the X<br>\nterminal. Features include:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>Completely Real Time</strong><br><br>\nAll panels and metrics are timed to be updated every 200 ms on the terminal<br>\noutput and every second on the HTML output.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Minimal Configuration needed</strong><br><br>\nYou can just run it against your access log file, pick the log format and let<br>\nGoAccess parse the access log and show you the stats.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Track Application Response Time</strong><br><br>\nTrack the time taken to serve the request. Extremely useful if you want to<br>\ntrack pages that are slowing down your site.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>WebSocket Authentication:</strong><br><br>\nGoAccess offers enhanced WebSocket authentication, supporting local and<br>\nexternal JWT verification, with secure token refresh capabilities and seamless<br>\nintegration with external authentication systems.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Nearly All Web Log Formats</strong><br><br>\nGoAccess allows any custom log format string.  Predefined options include,<br>\nApache, Nginx, Amazon S3, Elastic Load Balancing, CloudFront, etc.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Incremental Log Processing</strong><br><br>\nNeed data persistence? GoAccess has the ability to process logs incrementally<br>\nthrough the on-disk persistence options.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Only one dependency</strong><br><br>\nGoAccess is written in C. To run it, you only need ncurses as a dependency.<br>\nThat's it. It even features its own Web Socket server — <a href=\"http://gwsocket.io/\" rel=\"nofollow\">http://gwsocket.io/</a>.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Visitors</strong><br><br>\nDetermine the amount of hits, visitors, bandwidth, and metrics for slowest<br>\nrunning requests by the hour, or date.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Metrics per Virtual Host</strong><br><br>\nHave multiple Virtual Hosts (Server Blocks)? It features a panel that<br>\ndisplays which virtual host is consuming most of the web server resources.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>ASN (Autonomous System Number mapping)</strong><br><br>\nGreat for detecting malicious traffic patterns and block them accordingly.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Color Scheme Customizable</strong><br><br>\nTailor GoAccess to suit your own color taste/schemes. Either through the<br>\nterminal, or by simply applying the stylesheet on the HTML output.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Support for Large Datasets</strong><br><br>\nGoAccess features the ability to parse large logs due to its optimized<br>\nin-memory hash tables. It has very good memory usage and pretty good<br>\nperformance. This storage has support for on-disk persistence as well.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Docker Support</strong><br><br>\nAbility to build GoAccess' Docker image from upstream. You can still fully<br>\nconfigure it, by using Volume mapping and editing <code class=\"notranslate\">goaccess.conf</code>.  See<br>\n<a href=\"https://github.com/allinurl/goaccess#docker\">Docker</a> section below.<br>\nThere is also documentation how to use <a href=\"./docker-compose/README.md\">docker-compose</a>.</p>\n</li>\n</ul>\n<h3 dir=\"auto\">Nearly all web log formats...</h3>\n<p dir=\"auto\">GoAccess allows any custom log format string. Predefined options include, but<br>\nnot limited to:</p>\n<ul dir=\"auto\">\n<li>Amazon CloudFront (Download Distribution).</li>\n<li>Amazon Simple Storage Service (S3)</li>\n<li>AWS Elastic Load Balancing</li>\n<li>Combined Log Format (XLF/ELF) Apache | Nginx</li>\n<li>Common Log Format (CLF) Apache</li>\n<li>Google Cloud Storage.</li>\n<li>Apache virtual hosts</li>\n<li>Squid Native Format.</li>\n<li>W3C format (IIS).</li>\n<li>Caddy's JSON Structured format.</li>\n<li>Traefik's CLF flavor</li>\n</ul>\n<h2 dir=\"auto\">Why GoAccess?</h2>\n<p dir=\"auto\">GoAccess was designed to be a fast, terminal-based log analyzer. Its core idea<br>\nis to quickly analyze and view web server statistics in real time without<br>\nneeding to use your browser (<em>great if you want to do a quick analysis of your<br>\naccess log via SSH, or if you simply love working in the terminal</em>).</p>\n<p dir=\"auto\">While the terminal output is the default output, it has the capability to<br>\ngenerate a complete, self-contained, real-time <a href=\"https://rt.goaccess.io/?src=gh\" rel=\"nofollow\"><strong><code class=\"notranslate\">HTML</code></strong></a><br>\nreport, as well as a <a href=\"https://goaccess.io/json?src=gh\" rel=\"nofollow\"><strong><code class=\"notranslate\">JSON</code></strong></a>, and<br>\n<a href=\"https://goaccess.io/goaccess_csv_report.csv?src=gh\" rel=\"nofollow\"><strong><code class=\"notranslate\">CSV</code></strong></a> report.</p>\n<p dir=\"auto\">You can see it more of a monitor command tool than anything else.</p>\n<h2 dir=\"auto\">Installation</h2>\n<a href=\"https://repology.org/project/goaccess/versions\" rel=\"nofollow\">\n    <img src=\"https://camo.githubusercontent.com/ba94634a3f134ab36130a3b3c675850d50adb0010902d5245f8d593b8f7aba64/68747470733a2f2f7265706f6c6f67792e6f72672f62616467652f766572746963616c2d616c6c7265706f732f676f6163636573732e737667\" alt=\"Packaging status\" align=\"right\" data-canonical-src=\"https://repology.org/badge/vertical-allrepos/goaccess.svg\" style=\"max-width: 100%;\">\n</a>\n<h3 dir=\"auto\">Build from release</h3>\n<p dir=\"auto\">GoAccess can be compiled and used on *nix systems.</p>\n<p dir=\"auto\">Download, extract and compile GoAccess with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ wget https://tar.goaccess.io/goaccess-1.9.4.tar.gz\n$ tar -xzvf goaccess-1.9.4.tar.gz\n$ cd goaccess-1.9.4/\n$ ./configure --enable-utf8 --enable-geoip=mmdb\n$ make\n# make install\"><pre class=\"notranslate\"><code class=\"notranslate\">$ wget https://tar.goaccess.io/goaccess-1.9.4.tar.gz\n$ tar -xzvf goaccess-1.9.4.tar.gz\n$ cd goaccess-1.9.4/\n$ ./configure --enable-utf8 --enable-geoip=mmdb\n$ make\n# make install\n</code></pre></div>\n<h3 dir=\"auto\">Build from GitHub (Development)</h3>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ git clone https://github.com/allinurl/goaccess.git\n$ cd goaccess\n$ autoreconf -fiv\n$ ./configure --enable-utf8 --enable-geoip=mmdb\n$ make\n# make install\"><pre class=\"notranslate\"><code class=\"notranslate\">$ git clone https://github.com/allinurl/goaccess.git\n$ cd goaccess\n$ autoreconf -fiv\n$ ./configure --enable-utf8 --enable-geoip=mmdb\n$ make\n# make install\n</code></pre></div>\n<h3 dir=\"auto\">Distributions</h3>\n<p dir=\"auto\">It is easiest to install GoAccess on GNU+Linux using the preferred package manager<br>\nof your GNU+Linux distribution. Please note that not all distributions will have<br>\nthe latest version of GoAccess available.</p>\n<h4 dir=\"auto\">Debian/Ubuntu</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# apt-get install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># apt-get install goaccess\n</code></pre></div>\n<p dir=\"auto\"><strong>Note:</strong> It is likely this will install an outdated version of GoAccess. To<br>\nmake sure that you're running the latest stable version of GoAccess see<br>\nalternative option below.</p>\n<h4 dir=\"auto\">Official GoAccess Debian &amp; Ubuntu repository</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ wget -O - https://deb.goaccess.io/gnugpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/goaccess.gpg &gt;/dev/null\n$ echo &quot;deb [signed-by=/usr/share/keyrings/goaccess.gpg arch=$(dpkg --print-architecture)] https://deb.goaccess.io/ $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/goaccess.list\n$ sudo apt-get update\n$ sudo apt-get install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\">$ wget -O - https://deb.goaccess.io/gnugpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/goaccess.gpg &gt;/dev/null\n$ echo \"deb [signed-by=/usr/share/keyrings/goaccess.gpg arch=$(dpkg --print-architecture)] https://deb.goaccess.io/ $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/goaccess.list\n$ sudo apt-get update\n$ sudo apt-get install goaccess\n</code></pre></div>\n<p dir=\"auto\"><strong>Note</strong>:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">.deb</code> packages in the official repo are available through HTTPS as well. You may need to install <code class=\"notranslate\">apt-transport-https</code>.</li>\n</ul>\n<h4 dir=\"auto\">Fedora</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# yum install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># yum install goaccess\n</code></pre></div>\n<h4 dir=\"auto\">Arch</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# pacman -S goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># pacman -S goaccess\n</code></pre></div>\n<h4 dir=\"auto\">Gentoo</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# emerge net-analyzer/goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># emerge net-analyzer/goaccess\n</code></pre></div>\n<h4 dir=\"auto\">OS X / Homebrew</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# brew install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># brew install goaccess\n</code></pre></div>\n<h4 dir=\"auto\">FreeBSD</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# cd /usr/ports/sysutils/goaccess/ &amp;&amp; make install clean\n# pkg install sysutils/goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># cd /usr/ports/sysutils/goaccess/ &amp;&amp; make install clean\n# pkg install sysutils/goaccess\n</code></pre></div>\n<h4 dir=\"auto\">OpenBSD</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# cd /usr/ports/www/goaccess &amp;&amp; make install clean\n# pkg_add goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># cd /usr/ports/www/goaccess &amp;&amp; make install clean\n# pkg_add goaccess\n</code></pre></div>\n<h4 dir=\"auto\">openSUSE</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# zypper ar -f obs://server:http http\n# zypper in goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># zypper ar -f obs://server:http http\n# zypper in goaccess\n</code></pre></div>\n<h4 dir=\"auto\">OpenIndiana</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# pkg install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># pkg install goaccess\n</code></pre></div>\n<h4 dir=\"auto\">pkgsrc (NetBSD, Solaris, SmartOS, ...)</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# pkgin install goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\"># pkgin install goaccess\n</code></pre></div>\n<h4 dir=\"auto\">Windows</h4>\n<p dir=\"auto\">GoAccess can be used in Windows through Cygwin. See Cygwin's <a href=\"https://goaccess.io/faq#installation\" rel=\"nofollow\">packages</a>.  Or through the<br>\nGNU+Linux Subsystem on Windows 10.</p>\n<h4 dir=\"auto\">Docker</h4>\n<p dir=\"auto\">A Docker image has been updated, capable of directing output from an access log. If you only want to output a report, you can pipe a log from the external environment to a Docker-based process:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"touch report.html\ncat access.log | docker run --rm -i -v ./report.html:/report.html -e LANG=$LANG allinurl/goaccess -a -o report.html --log-format COMBINED -\"><pre class=\"notranslate\"><code class=\"notranslate\">touch report.html\ncat access.log | docker run --rm -i -v ./report.html:/report.html -e LANG=$LANG allinurl/goaccess -a -o report.html --log-format COMBINED -\n</code></pre></div>\n<p dir=\"auto\">OR real-time</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"tail -F access.log | docker run -p 7890:7890 --rm -i -e LANG=$LANG allinurl/goaccess -a -o report.html --log-format COMBINED --real-time-html -\"><pre class=\"notranslate\"><code class=\"notranslate\">tail -F access.log | docker run -p 7890:7890 --rm -i -e LANG=$LANG allinurl/goaccess -a -o report.html --log-format COMBINED --real-time-html -\n</code></pre></div>\n<p dir=\"auto\">There is also documentation how to use <a href=\"./docker-compose/README.md\">docker-compose</a>.</p>\n<h5 dir=\"auto\">Build in isolated container</h5>\n<p dir=\"auto\">You can also build the binary for Debian based systems in an isolated container environment to prevent cluttering your local system with the development libraries:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ curl -L &quot;https://github.com/allinurl/goaccess/archive/refs/heads/master.tar.gz&quot; | tar -xz &amp;&amp; cd goaccess-master\n$ docker build -t goaccess/build.debian-12 -f Dockerfile.debian-12 .\n$ docker run -i --rm -v $PWD:/goaccess goaccess/build.debian-12 &gt; goaccess\"><pre class=\"notranslate\"><code class=\"notranslate\">$ curl -L \"https://github.com/allinurl/goaccess/archive/refs/heads/master.tar.gz\" | tar -xz &amp;&amp; cd goaccess-master\n$ docker build -t goaccess/build.debian-12 -f Dockerfile.debian-12 .\n$ docker run -i --rm -v $PWD:/goaccess goaccess/build.debian-12 &gt; goaccess\n</code></pre></div>\n<p dir=\"auto\">You can read more about using the docker image in <a href=\"https://github.com/allinurl/goaccess/blob/master/DOCKER.md\">DOCKER.md</a>.</p>\n<h4 dir=\"auto\">Distribution Packages</h4>\n<p dir=\"auto\">GoAccess has minimal requirements, it's written in C and requires only ncurses.<br>\nHowever, below is a table of some optional dependencies in some distros to<br>\nbuild GoAccess from source.</p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th>Distro</th>\n<th>NCurses</th>\n<th>GeoIP (opt)</th>\n<th>GeoIP2 (opt)</th>\n<th>OpenSSL (opt)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Ubuntu/Debian</strong></td>\n<td>libncurses-dev</td>\n<td>libgeoip-dev</td>\n<td>libmaxminddb-dev</td>\n<td>libssl-dev</td>\n</tr>\n<tr>\n<td><strong>RHEL/CentOS</strong></td>\n<td>ncurses-devel</td>\n<td>geoip-devel</td>\n<td>libmaxminddb-devel</td>\n<td>openssl-devel</td>\n</tr>\n<tr>\n<td><strong>Arch</strong></td>\n<td>ncurses</td>\n<td>geoip</td>\n<td>libmaxminddb</td>\n<td>openssl</td>\n</tr>\n<tr>\n<td><strong>Gentoo</strong></td>\n<td>sys-libs/ncurses</td>\n<td>dev-libs/geoip</td>\n<td>dev-libs/libmaxminddb</td>\n<td>dev-libs/openssl</td>\n</tr>\n<tr>\n<td><strong>Slackware</strong></td>\n<td>ncurses</td>\n<td>GeoIP</td>\n<td>libmaxminddb</td>\n<td>openssl</td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir=\"auto\"><strong>Note</strong>: You may need to install build tools like <code class=\"notranslate\">gcc</code>, <code class=\"notranslate\">autoconf</code>,<br>\n<code class=\"notranslate\">gettext</code>, <code class=\"notranslate\">autopoint</code> etc. for compiling/building software from source. e.g.,<br>\n<code class=\"notranslate\">base-devel</code>, <code class=\"notranslate\">build-essential</code>, <code class=\"notranslate\">\"Development Tools\"</code>.</p>\n<h2 dir=\"auto\">Storage</h2>\n<h4 dir=\"auto\">Default Hash Tables</h4>\n<p dir=\"auto\">In-memory storage provides better performance at the cost of limiting the<br>\ndataset size to the amount of available physical memory. GoAccess uses<br>\nin-memory hash tables.  It has very good memory usage and pretty good<br>\nperformance. This storage has support for on-disk persistence as well.</p>\n<h2 dir=\"auto\">Command Line / Config Options</h2>\n<p dir=\"auto\">See <a href=\"https://goaccess.io/man#options\" rel=\"nofollow\"><strong>options</strong></a> that can be supplied to the command or<br>\nspecified in the configuration file. If specified in the configuration file, long<br>\noptions need to be used without prepending <code class=\"notranslate\">--</code>.</p>\n<h2 dir=\"auto\">Usage / Examples</h2>\n<p dir=\"auto\"><strong>Note</strong>: Piping data into GoAccess won't prompt a log/date/time<br>\nconfiguration dialog, you will need to previously define it in your<br>\nconfiguration file or in the command line.</p>\n<h3 dir=\"auto\">Getting Started</h3>\n<p dir=\"auto\">To output to a terminal and generate an interactive report:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log\n</code></pre></div>\n<p dir=\"auto\">To generate an HTML report:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -a &gt; report.html\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -a &gt; report.html\n</code></pre></div>\n<p dir=\"auto\">To generate a JSON report file:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -a -d -o report.json\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -a -d -o report.json\n</code></pre></div>\n<p dir=\"auto\">To generate a CSV report to stdout:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log --no-csv-summary -o csv\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log --no-csv-summary -o csv\n</code></pre></div>\n<p dir=\"auto\">GoAccess also allows great flexibility for real-time filtering and parsing. For<br>\ninstance, to quickly diagnose issues by monitoring logs since goaccess was<br>\nstarted:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -f access.log | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -f access.log | goaccess -\n</code></pre></div>\n<p dir=\"auto\">And even better, to filter while maintaining opened a pipe to preserve<br>\nreal-time analysis, we can make use of <code class=\"notranslate\">tail -f</code> and a matching pattern tool<br>\nsuch as <code class=\"notranslate\">grep</code>, <code class=\"notranslate\">awk</code>, <code class=\"notranslate\">sed</code>, etc.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -f access.log | grep -i --line-buffered 'firefox' | goaccess --log-format=COMBINED -\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -f access.log | grep -i --line-buffered 'firefox' | goaccess --log-format=COMBINED -\n</code></pre></div>\n<p dir=\"auto\">or to parse from the beginning of the file while maintaining the pipe opened<br>\nand applying a filter</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -f -n +0 access.log | grep -i --line-buffered 'firefox' | goaccess -o report.html --real-time-html -\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -f -n +0 access.log | grep -i --line-buffered 'firefox' | goaccess -o report.html --real-time-html -\n</code></pre></div>\n<h3 dir=\"auto\">Multiple Log files</h3>\n<p dir=\"auto\">There are several ways to parse multiple logs with GoAccess. The simplest is to<br>\npass multiple log files to the command line:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log access.log.1\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log access.log.1\n</code></pre></div>\n<p dir=\"auto\">It's even possible to parse files from a pipe while reading regular files:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# cat access.log.2 | goaccess access.log access.log.1 -\"><pre class=\"notranslate\"><code class=\"notranslate\"># cat access.log.2 | goaccess access.log access.log.1 -\n</code></pre></div>\n<p dir=\"auto\"><strong>Note</strong>: the single dash is appended to the command line to let GoAccess<br>\nknow that it should read from the pipe.</p>\n<p dir=\"auto\">Now if we want to add more flexibility to GoAccess, we can use <code class=\"notranslate\">zcat --force</code><br>\nto read compressed and uncompressed files. For instance, if we would<br>\nlike to process all log files <code class=\"notranslate\">access.log*</code>, we can do:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# zcat --force access.log* | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># zcat --force access.log* | goaccess -\n</code></pre></div>\n<p dir=\"auto\"><em>Note</em>: On Mac OS X, use <code class=\"notranslate\">gunzip -c</code> instead of <code class=\"notranslate\">zcat</code>.</p>\n<h3 dir=\"auto\">Multi-thread Support</h3>\n<p dir=\"auto\">Use <code class=\"notranslate\">--jobs=&lt;count&gt;</code> (or <code class=\"notranslate\">-j</code>) to enable multi-thread parsing. For example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o report.html -j 4\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o report.html -j 4\n</code></pre></div>\n<p dir=\"auto\">And use <code class=\"notranslate\">--chunk-size=&lt;256-32768&gt;</code> to adjust chunk size, the default chunk size is 1024. For example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o report.html -j 4 --chunk-size=8192\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o report.html -j 4 --chunk-size=8192\n</code></pre></div>\n<h3 dir=\"auto\">Real-time HTML outputs</h3>\n<p dir=\"auto\">GoAccess has the ability the output real-time data in the HTML report. You can<br>\neven email the HTML file since it is composed of a single file with no external<br>\nfile dependencies, how neat is that!</p>\n<p dir=\"auto\">The process of generating a real-time HTML report is very similar to the<br>\nprocess of creating a static report. Only <code class=\"notranslate\">--real-time-html</code> is needed to make<br>\nit real-time.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o /usr/share/nginx/html/your_site/report.html --real-time-html\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o /usr/share/nginx/html/your_site/report.html --real-time-html\n</code></pre></div>\n<p dir=\"auto\">To view the report you can navigate to <code class=\"notranslate\">http://your_site/report.html</code>.</p>\n<p dir=\"auto\">By default, GoAccess will use the host name of the generated report.<br>\nOptionally, you can specify the URL to which the client's browser will connect<br>\nto. See <a href=\"https://goaccess.io/faq\" rel=\"nofollow\">FAQ</a> for a more detailed example.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o report.html --real-time-html --ws-url=goaccess.io\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o report.html --real-time-html --ws-url=goaccess.io\n</code></pre></div>\n<p dir=\"auto\">By default, GoAccess listens on port 7890, to use a different port other than<br>\n7890, you can specify it as (make sure the port is opened):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o report.html --real-time-html --port=9870\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o report.html --real-time-html --port=9870\n</code></pre></div>\n<p dir=\"auto\">And to bind the WebSocket server to a different address other than 0.0.0.0, you<br>\ncan specify it as:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log -o report.html --real-time-html --addr=127.0.0.1\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log -o report.html --real-time-html --addr=127.0.0.1\n</code></pre></div>\n<p dir=\"auto\"><strong>Note</strong>: To output real time data over a TLS/SSL connection, you need to use<br>\n<code class=\"notranslate\">--ssl-cert=&lt;cert.crt&gt;</code> and <code class=\"notranslate\">--ssl-key=&lt;priv.key&gt;</code>.</p>\n<h3 dir=\"auto\">Filtering</h3>\n<h4 dir=\"auto\">Working with dates</h4>\n<p dir=\"auto\">Another useful pipe would be filtering dates out of the web log</p>\n<p dir=\"auto\">The following will get all HTTP requests starting on <code class=\"notranslate\">05/Dec/2010</code> until the<br>\nend of the file.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# sed -n '/05\\/Dec\\/2010/,$ p' access.log | goaccess -a -\"><pre class=\"notranslate\"><code class=\"notranslate\"># sed -n '/05\\/Dec\\/2010/,$ p' access.log | goaccess -a -\n</code></pre></div>\n<p dir=\"auto\">or using relative dates such as yesterdays or tomorrows day:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# sed -n '/'$(date '+%d\\/%b\\/%Y' -d '1 week ago')'/,$ p' access.log | goaccess -a -\"><pre class=\"notranslate\"><code class=\"notranslate\"># sed -n '/'$(date '+%d\\/%b\\/%Y' -d '1 week ago')'/,$ p' access.log | goaccess -a -\n</code></pre></div>\n<p dir=\"auto\">If we want to parse only a certain time-frame from DATE a to DATE b, we can do:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# sed -n '/5\\/Nov\\/2010/,/5\\/Dec\\/2010/ p' access.log | goaccess -a -\"><pre class=\"notranslate\"><code class=\"notranslate\"># sed -n '/5\\/Nov\\/2010/,/5\\/Dec\\/2010/ p' access.log | goaccess -a -\n</code></pre></div>\n<p dir=\"auto\">If we want to preserve only certain amount of data and recycle storage, we can<br>\nkeep only a certain number of days. For instance to keep &amp; show the last 5<br>\ndays:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess access.log --keep-last=5\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess access.log --keep-last=5\n</code></pre></div>\n<h4 dir=\"auto\">Virtual hosts</h4>\n<p dir=\"auto\">Assuming your log contains the virtual host field. For instance:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"vhost.io:80 8.8.4.4 - - [02/Mar/2016:08:14:04 -0600] &quot;GET /shop HTTP/1.1&quot; 200 615 &quot;-&quot; &quot;Googlebot-Image/1.0&quot;\"><pre class=\"notranslate\"><code class=\"notranslate\">vhost.io:80 8.8.4.4 - - [02/Mar/2016:08:14:04 -0600] \"GET /shop HTTP/1.1\" 200 615 \"-\" \"Googlebot-Image/1.0\"\n</code></pre></div>\n<p dir=\"auto\">And you would like to append the virtual host to the request in order to see<br>\nwhich virtual host the top urls belong to:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"awk '$8=$1$8' access.log | goaccess -a -\"><pre class=\"notranslate\"><code class=\"notranslate\">awk '$8=$1$8' access.log | goaccess -a -\n</code></pre></div>\n<p dir=\"auto\">To do the same, but also use real-time filtering and parsing:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"tail -f  access.log | unbuffer -p awk '$8=$1$8' | goaccess -a -\"><pre class=\"notranslate\"><code class=\"notranslate\">tail -f  access.log | unbuffer -p awk '$8=$1$8' | goaccess -a -\n</code></pre></div>\n<p dir=\"auto\">To exclude a list of virtual hosts you can do the following:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# grep -v &quot;`cat exclude_vhost_list_file`&quot; vhost_access.log | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># grep -v \"`cat exclude_vhost_list_file`\" vhost_access.log | goaccess -\n</code></pre></div>\n<h4 dir=\"auto\">Files, status codes and bots</h4>\n<p dir=\"auto\">To parse specific pages, e.g., page views, <code class=\"notranslate\">html</code>, <code class=\"notranslate\">htm</code>, <code class=\"notranslate\">php</code>, etc. within a<br>\nrequest:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# awk '$7~/\\.html|\\.htm|\\.php/' access.log | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># awk '$7~/\\.html|\\.htm|\\.php/' access.log | goaccess -\n</code></pre></div>\n<p dir=\"auto\">Note, <code class=\"notranslate\">$7</code> is the request field for the common and combined log format,<br>\n(without Virtual Host), if your log includes Virtual Host, then you probably<br>\nwant to use <code class=\"notranslate\">$8</code> instead. It's best to check which field you are shooting for,<br>\ne.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -10 access.log | awk '{print $8}'\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -10 access.log | awk '{print $8}'\n</code></pre></div>\n<p dir=\"auto\">Or to parse a specific status code, e.g., 500 (Internal Server Error):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# awk '$9~/500/' access.log | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># awk '$9~/500/' access.log | goaccess -\n</code></pre></div>\n<p dir=\"auto\">Or multiple status codes, e.g., all 3xx and 5xx:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -f -n +0 access.log | awk '$9~/3[0-9]{2}|5[0-9]{2}/' | goaccess -o out.html -\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -f -n +0 access.log | awk '$9~/3[0-9]{2}|5[0-9]{2}/' | goaccess -o out.html -\n</code></pre></div>\n<p dir=\"auto\">And to get an estimated overview of how many bots (crawlers) are hitting your server:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# tail -F -n +0 access.log | grep -i --line-buffered 'bot' | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># tail -F -n +0 access.log | grep -i --line-buffered 'bot' | goaccess -\n</code></pre></div>\n<h3 dir=\"auto\">Tips</h3>\n<p dir=\"auto\">Also, it is worth pointing out that if we want to run GoAccess at lower<br>\npriority, we can run it as:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# nice -n 19 goaccess -f access.log -a\"><pre class=\"notranslate\"><code class=\"notranslate\"># nice -n 19 goaccess -f access.log -a\n</code></pre></div>\n<p dir=\"auto\">and if you don't want to install it on your server, you can still run it from<br>\nyour local machine!</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# ssh -n root@server 'tail -f /var/log/apache2/access.log' | goaccess -\"><pre class=\"notranslate\"><code class=\"notranslate\"># ssh -n root@server 'tail -f /var/log/apache2/access.log' | goaccess -\n</code></pre></div>\n<p dir=\"auto\"><strong>Note:</strong> SSH requires <code class=\"notranslate\">-n</code> so GoAccess can read from stdin. Also, make sure to<br>\nuse SSH keys for authentication as it won't work if a passphrase is required.</p>\n<h4 dir=\"auto\">Troubleshooting</h4>\n<p dir=\"auto\">We receive many questions and issues that have been answered previously.</p>\n<ul dir=\"auto\">\n<li>Date/time matching problems? Check that your log format and the system locale in which you run GoAccess match. See <a href=\"https://github.com/allinurl/goaccess/issues/1571#issuecomment-543186858\" data-hovercard-type=\"issue\" data-hovercard-url=\"/allinurl/goaccess/issues/1571/hovercard\">#1571</a></li>\n<li>Problems with pattern matching? Spaces are often a problem, see for instance <a href=\"https://github.com/allinurl/goaccess/issues/136\" data-hovercard-type=\"issue\" data-hovercard-url=\"/allinurl/goaccess/issues/136/hovercard\">#136</a>, <a href=\"https://github.com/allinurl/goaccess/issues/1579\" data-hovercard-type=\"issue\" data-hovercard-url=\"/allinurl/goaccess/issues/1579/hovercard\">#1579</a></li>\n<li>Other issues matching log entries: See <a href=\"https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3A%22log%2Fdate%2Ftime+format%22\">&gt;200 closed issues regarding log/date/time formats</a></li>\n<li>Problems with log processing? See <a href=\"https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3Alog-processing\">&gt;111 issues regarding log processing</a></li>\n</ul>\n<h4 dir=\"auto\">Incremental log processing</h4>\n<p dir=\"auto\">GoAccess has the ability to process logs incrementally through its internal<br>\nstorage and dump its data to disk. It works in the following way:</p>\n<ol dir=\"auto\">\n<li>A dataset must be persisted first with <code class=\"notranslate\">--persist</code>, then the same dataset<br>\ncan be loaded with.</li>\n<li><code class=\"notranslate\">--restore</code>.  If new data is passed (piped or through a log file), it will<br>\nappend it to the original dataset.</li>\n</ol>\n<h5 dir=\"auto\">NOTES</h5>\n<p dir=\"auto\">GoAccess keeps track of inodes of all the files processed (assuming files will<br>\nstay on the same partition), in addition, it extracts a snippet of data from<br>\nthe log along with the last line parsed of each file and the timestamp of the<br>\nlast line parsed. e.g., <code class=\"notranslate\">inode:29627417|line:20012|ts:20171231235059</code></p>\n<p dir=\"auto\">First, it compares if the snippet matches the log being parsed, if it does, it<br>\nassumes the log hasn't changed drastically, e.g., hasn't been truncated. If<br>\nthe inode does not match the current file, it parses all lines. If the current<br>\nfile matches the inode, it then reads the remaining lines and updates the count<br>\nof lines parsed and the timestamp. As an extra precaution, it won't parse log<br>\nlines with a timestamp ≤ than the one stored.</p>\n<p dir=\"auto\">Piped  data works based off the timestamp of the last line read. For instance,<br>\nit will parse and discard all incoming entries until it finds a timestamp &gt;=<br>\nthan the one stored.</p>\n<h5 dir=\"auto\">Examples</h5>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// last month access log\n# goaccess access.log.1 --persist\"><pre class=\"notranslate\"><code class=\"notranslate\">// last month access log\n# goaccess access.log.1 --persist\n</code></pre></div>\n<p dir=\"auto\">then, load it with</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// append this month access log, and preserve new data\n# goaccess access.log --restore --persist\"><pre class=\"notranslate\"><code class=\"notranslate\">// append this month access log, and preserve new data\n# goaccess access.log --restore --persist\n</code></pre></div>\n<p dir=\"auto\">To read persisted data only (without parsing new data)</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# goaccess --restore\"><pre class=\"notranslate\"><code class=\"notranslate\"># goaccess --restore\n</code></pre></div>\n<h2 dir=\"auto\">Contributing</h2>\n<p dir=\"auto\">Any help on GoAccess is welcome. The most helpful way is to try it out and give<br>\nfeedback. Feel free to use the GitHub issue tracker and pull requests to<br>\ndiscuss and submit code changes.</p>\n<p dir=\"auto\">You can contribute to our translations by editing the .po files direct on GitHub or using the visual interface <a href=\"https://inlang.com/editor/github.com/allinurl/goaccess\" rel=\"nofollow\">inlang.com</a></p>\n<p dir=\"auto\"><a href=\"https://inlang.com/editor/github.com/allinurl/goaccess?ref=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/2a135d6a68d4a5158ea1fc67301c6184aa17a94f1947f03807c6c28b68410667/68747470733a2f2f696e6c616e672e636f6d2f62616467653f75726c3d6769746875622e636f6d2f616c6c696e75726c2f676f616363657373\" alt=\"translation badge\" data-canonical-src=\"https://inlang.com/badge?url=github.com/allinurl/goaccess\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Enjoy!</p>","updatedAt":"2025-05-21T15:59:21Z","upvoteCount":null,"author":{"login":"eryajf","avatarUrl":"https://avatars.githubusercontent.com/u/33259379?u=e4a4090a38ac2473aaed4ef9945233636776c6c3&v=4","url":"https://github.com/eryajf"},"category":null,"labels":{"edges":[{"node":{"name":"更多","color":"25B472"}},{"node":{"name":"日志管理","color":"0f7858"}},{"node":{"name":"allinurl","color":"1467b5"}}]},"comments":{"edges":[]}}},"pageContext":{"number":191,"previous":{"title":"qdm12/gluetun: VPN 客户端位于一个薄型 Docker 容器中，适用于多个 VPN 提供商，用 Go 编写，使用 OpenVPN 或 Wireguard、TLS 上的 DNS，并内置了一些代理服务器。","number":190},"next":{"title":"gocd/gocd: GoCD 主要仓库 - 持续交付服务器","number":192}}},
    "staticQueryHashes": ["151096407","2861350382"]}