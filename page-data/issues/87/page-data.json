{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/87",
    "result": {"data":{"issuesJson":{"id":"69295fc8-6df8-54d7-add4-c266e51f38c9","title":"ostafen/clover: 基于 Golang 编写，一个轻量级的NoSQL数据库，由于它的代码库很小，所以设计得简单且易于维护","number":87,"bodyHTML":"<div align=\"center\" dir=\"auto\">\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a><br><br></p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th align=\"right\">Repos</th>\n<th align=\"left\"><a href=\"https://github.com/ostafen/clover\">ostafen/clover</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><strong>Views</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/1cb0a34fc5ff91a51aecc2c22d54652bb9e071e647fcc80914c7e63663eb09fc/68747470733a2f2f76696577732e77686174696c656172656e65642e746f6461792f76696577732f6769746875622f6f73746166656e2f636c6f7665722e737667\" alt=\"views\" data-canonical-src=\"https://views.whatilearened.today/views/github/ostafen/clover.svg\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Stars</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/0ec9d031b796e029ad6aa2c68bca5d8d7cfdc466dcee036464fef2658bfe0c01/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6f73746166656e2f636c6f7665723f636f6c6f723d663266303864266c6f676f3d556e64657274616c65266c6f676f436f6c6f723d656234363330\" alt=\"stars\" data-canonical-src=\"https://img.shields.io/github/stars/ostafen/clover?color=f2f08d&amp;logo=Undertale&amp;logoColor=eb4630\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Forks</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/d5380cee8b1546d2e501237022bfc2d7ca2979bbb8adddac77e628b2383c0d29/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6f73746166656e2f636c6f7665723f636f6c6f723d626138366562266c6f676f3d48616e647368616b65266c6f676f436f6c6f723d656136616136\" alt=\"forks\" data-canonical-src=\"https://img.shields.io/github/forks/ostafen/clover?color=ba86eb&amp;logo=Handshake&amp;logoColor=ea6aa6\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>License</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/8e762339fc458f22d4fcec8aa6f35be04562340771714b2e6d3aad1ded7d29cf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f73746166656e2f636c6f7665723f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e53556845556741414144414141414177434159414141425841766d48414141414358424957584d41414173544141414c457745416d70775941414144336b6c45515652346e4f335953557a5555426748384a726f57567255474a66456d3773584e63534446784d544c327069347348456778654e526f77586770455742445552522532424e414e4f4b4f4b36366f6f4b4a4742586545475263574163455646475152484677516d483525324630774861655748493944554455354c356b6e6568644f62377a66652532423139636e434a47495243516945596c514237594a4979474c38616f73756c565a36695246516a69474b6b7564576735614c6c704f70704e586e665071773555304459524a6d56786a4367464633424c755a476d416f5655694b4541726d583744375553677351706f72674761336748664b34483663754262435644334771683141352532424c6745253242467749656e514d306a6f446f66714c6f48564e7742796d384370546e416d327a51713073676478624964515a556c416b7150415a3664676a303541446f59526f6f66792532466f5869726f376b3551586a4c6f70677a4b69514e6c4c4461716f4967754577426a7a7150355066446a45394479495879493633464d547751464d43567271774e61763451666f52673538514625324266724d485172454b3844546f434d714e4179574e4866786d54526f4c4f726d5352566747744466714345715a4f4851727a6f34706243557341333431365169364551394b476a6345465267484f724f4b6e5536574162396247455459656b4b7843766a546167394534706a653534446b3551503862624d4859762532464333756541654a6b50304f4778422532424a70426e4172595238455951516e6f4e31414e4661426e5050356c385372736559514c303641646b30464a5938484f5761424d6c6541486a683068506f73497a6c6f3876304125324633345a694f6548726130714b52504d5653493774762532423932747725324676687855654252713456454c674d376642714b354770526d6f514c584e7075625475367a6f4e52706754386e5051627138347764253246494375767978694b4871694e41664933774d367549684271476b4c696977414f734b44714f68743749747239567938536a52424557667941627225324668523142667056514664484a42253246423268683778376a36517077435665655951326b72554235436c636a3641326d3067576a25324244306d4c34397a573563517943484c4e37726a6c6d6d6174457958582532464372547a412532466f51785a6b576c39474a5443566f25324279546a3837253242346769504b6376307149486f344156344430565a727251493334706e70524d36357875652532467a417265453425324654253246536f676c664542794d7369517441546c4c3352414a355948725378365a44665337307337754d486842705225324659423573305057366f455270316236253246667252684b3353444c35546965364f515548516c5133735644752532427a50636b397657453973747225324236496a533967486d5750616861444a25324277434b364e494242587348423948796b587378774470686c436d416476706c6162554a4e6e5a504239342532464e7436784f6538587a4562503257684d335741673147756236744825324233513150673337365239713475716c6e6f36676448476a444f5139306562303141484d3672596975554a314f713472344656756a35765239427a4d3957674e764f7977446869495951467667626366774166774d764863615067425041253246447948476a50624e394138616d6562636477416444354e6633373574787165774e5552656f797677424958594c645170576c6877465771745061435044334173467541535636717171496c62304a766b564331464c39576b4c55556c55574b337a585a4c46432532423125324642726f46746f364f7358497545594a5034447a7a5732594656316f4a614141414141456c46546b5375516d4343\" alt=\"license\" data-canonical-src=\"https://img.shields.io/github/license/ostafen/clover?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAD3klEQVR4nO3YSUzUUBgH8JroWVrUGJfEm7sXNcSDFxMTL2pi4sHEgxeNRowXgpEWBDURR%2BNANOKOK66ooKJGBXeEGRcWAcEVFGQRHFwQmH5%2F0wHaeWHI9DUDU5L5knehdOb7zfe%2B19cnCJGIRCQiEYlQB7YJIyGL8aosulVZ6iRFQjiGKkudWg5aLlpOppNXnfPqw5U0DYRJmVxjCgFF3BLuZGmAoVUiKEArmX7D7USgsQporgGa3gHfK4H6cuBbCVD3Gqh1A5%2BLgE%2BFwIenQM0joDofqLoHVNwBym8CpTnAm2zQq0sgdxbIdQZUlAkqPAZ6dgj05ADoYRoofy%2FoXiro7k5QXjLopgzKiQNlLDaqoIguEwBjzqP5PfDjE9DyIXyI63FMTwQFMCVrqwNav4QfoRg58QF%2BfrMHQrEK8DToCMqNAyWNHfxmTRoLOrmSRVgGtDfqCEqZOHQrzo4pbCUsA3416Qi6EQ9KGjcEFRgHOrOKnU6WAb9bGETYekKxCvjTag9E4pje54Dk5QP8bbMHYv%2FC3ueAeJkP0OGxB%2BJpBnArYR8EYQQnoN1ANFaBnPP5l8SrseYQL06Adk0FJY8HOWaBMleAHjh0hPosIzlo8v0A%2F34ZiOeHra0qKRPMVSI7tv%2B92tw%2FvhxUeBRq4VELgM7fBqK5GpRmoQLXNpubTu6zoNRpgT8nPQbq84wd%2FICuvyxiKHqiNAfI3wM6uIhBqGkLiiwAOsKDqOht7Itr9Vy8SjRBEWfyAbr%2FhR1BfpVQFdHJB%2FB2hh7x7j6QpwCVeeYQ2krUB5Clcj6A2m0gWj%2BD0mL49zW5cQyCHLN7rjlmmatEyXX%2FCrTzA%2FoQxZkWl9GJTCVo%2ByTj87%2B4giPKcv0qIHo4AV4D0VZrrQI34pnpRM65xue%2FzAreE4%2FT%2FSoglfEByMsiQtATlL3RAJ5YHrSx6ZDfS70s7uMHhBpR%2FYB5s0PW6oERp1b6%2FfrRhK3SDL5Tie6OQUHQlQ3sVDu%2BzPck9vWE9str%2B6IjS9gHmWPahaDJ%2BwCK6NIBBXsHB9HykXsxwDphlCmAdvplabUJNnZPB94%2FNt6xOe8XzEbP2WhM3WAg1Gub6tH%2B3Q1Pg376R9q4uqlno6gdHGjDOQ90eb01AHM6rYiuUJ1Oq4r4FVuj5vR9BzM9WgNvOywDhiIYQFvgbcfwAfwMvHcaPgBPA%2FDyHGjPbN9A8amebcdwAdD5Nf375txqewNUReoyvwBIXYLdQpWlhwFWqtPaCPD3AsFuASV6qqqIlb0JvkVC1FL9WkLUUlUWK3zXZLFC%2B1%2FBroFto6OsXIuEYJP4DzzW2YFV1oJaAAAAAElFTkSuQmCC\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>UpdatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/4ba8b293b96f665f5e7bb445e392a3d0b6f327704c27371b3e664fa868a5f9f8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6f73746166656e2f636c6f7665723f646973706c61795f74696d657374616d703d636f6d6d6974746572266c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d557064617465644174\" alt=\"last-commit\" data-canonical-src=\"https://img.shields.io/github/last-commit/ostafen/clover?display_timestamp=committer&amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=UpdatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>CreatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/d2c1d6f6fc4124372c7f05668e5d17a32b0fc1161f054f98738a0e2630e684fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f637265617465642d61742f6f73746166656e2f636c6f7665723f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d437265617465644174\" alt=\"create-at\" data-canonical-src=\"https://img.shields.io/github/created-at/ostafen/clover?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=CreatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<a href=\"https://github.com/opsre/awesome-ops\">\n</a><p dir=\"auto\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/b964a36ea4078c39f603d46a29436371c7541a2f26e0228d7b21b9d9805b43d3/68747470733a2f2f736f6369616c6966792e6769742e63692f6f707372652f617765736f6d652d6f70732f696d6167653f6465736372697074696f6e3d3126666f6e743d42697474657226666f726b733d31266973737565733d31266c616e67756167653d31266c6f676f3d6874747073253341253246253246617661746172732e67697468756275736572636f6e74656e742e636f6d25324675253246313838353638303230266e616d653d31266f776e65723d31267061747465726e3d436972637569742b426f6172642670756c6c733d31267374617267617a6572733d31267468656d653d4c69676874\" alt=\"\" data-canonical-src=\"https://socialify.git.ci/opsre/awesome-ops/image?description=1&amp;font=Bitter&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F188568020&amp;name=1&amp;owner=1&amp;pattern=Circuit+Board&amp;pulls=1&amp;stargazers=1&amp;theme=Light\" style=\"max-width: 100%;\"></a></p>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a>\n</div>\n<p align=\"center\" dir=\"auto\">\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\".github/logo.png#gh-light-mode-only\"><img alt=\"CloverDB Logo\" src=\".github/logo.png#gh-light-mode-only\" width=\"300px\" style=\"max-width: 100%;\"></a>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\".github/logo-white.png#gh-dark-mode-only\"><img alt=\"CloverDB Logo\" src=\".github/logo-white.png#gh-dark-mode-only\" width=\"300px\" style=\"max-width: 100%;\"></a>\n</p>\n<h2 align=\"center\" dir=\"auto\">Lightweight document-oriented NoSQL Database</h2>\n<p dir=\"auto\"><a href=\"https://github.com/avelino/awesome-go\"><img src=\"https://camo.githubusercontent.com/d8b2bde4796b67266f07c7a619f554c926ca4750d5d8861b4b740baaddc3fd1e/68747470733a2f2f617765736f6d652e72652f6d656e74696f6e65642d62616467652e737667\" alt=\"Mentioned in Awesome Go\" data-canonical-src=\"https://awesome.re/mentioned-badge.svg\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://pkg.go.dev/github.com/ostafen/clover\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/f93b9233e2c68381aaa35cbccff2ca3db09c9ea5a71a1d99b2bff4672af3c252/68747470733a2f2f706b672e676f2e6465762f62616467652f62616467652f6769746875622e636f6d2f6f73746166656e2f636c6f7665722e737667\" alt=\"Go Reference\" data-canonical-src=\"https://pkg.go.dev/badge/badge/github.com/ostafen/clover.svg\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://goreportcard.com/report/github.com/ostafen/clover\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1247c415fa09c8bde8f81a404cfc6d3be06f1009ee129a7cc9dd1c9967534cae/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6f73746166656e2f636c6f766572\" alt=\"Go Report Card\" data-canonical-src=\"https://goreportcard.com/badge/github.com/ostafen/clover\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/cce5a2a14b0faab422e0bfcdc074afb46089831a0bf5930a7d8af3f31b98f847/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\" alt=\"License: MIT\" data-canonical-src=\"https://img.shields.io/badge/License-MIT-blue.svg\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://coveralls.io/github/ostafen/clover\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/1b2b5a427af6ee84b8c53088e11e5084d1ef0fce051a9af256c71219bdf64769/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f73746166656e2f636c6f7665722f62616467652e737667\" alt=\"Coverage Status\" data-canonical-src=\"https://coveralls.io/repos/github/ostafen/clover/badge.svg\" style=\"max-width: 100%;\"></a><br>\n<a href=\"https://gitter.im/cloverDB/community?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/04b0e93910b83c8cce4f355215baf6778425fce394c7595d50e2f39ecc9981d2/68747470733a2f2f6261646765732e6769747465722e696d2f636c6f76657244422f636f6d6d756e6974792e737667\" alt=\"Join the chat at https://gitter.im/cloverDB/community\" data-canonical-src=\"https://badges.gitter.im/cloverDB/community.svg\" style=\"max-width: 100%;\"></a></p>\n<blockquote>\n<p dir=\"auto\">🇬🇧 English | <a href=\"README-CN.md\">🇨🇳 简体中文</a> | <a href=\"README-ES.md\">🇪🇸 Spanish</a></p>\n</blockquote>\n<p dir=\"auto\"><strong>CloverDB</strong> is a lightweight NoSQL database designed for being simple and easily maintainable, thanks to its small code base. It has been inspired by <a href=\"https://github.com/msiemens/tinydb\">tinyDB</a>.</p>\n<h2 dir=\"auto\">Features</h2>\n<ul dir=\"auto\">\n<li>Document oriented</li>\n<li>Written in pure Golang</li>\n<li>Simple and intuitive api</li>\n<li>Easily maintainable</li>\n</ul>\n<h2 dir=\"auto\">Why CloverDB?</h2>\n<p dir=\"auto\"><strong>CloverDB</strong> has been written for being easily maintainable. As such, it trades performance with simplicity, and is not intended to be an alternative to more performant databases such as <strong>MongoDB</strong> or <strong>MySQL</strong>.<br>\nHowever, there are projects where running a separate database server may result overkilled, and, for simple queries, network delay may be the major performance bottleneck.<br>\nFor such scenarios, <strong>CloverDB</strong> may be a more suitable alternative.</p>\n<h2 dir=\"auto\">Database Layout</h2>\n<p dir=\"auto\">Previously, <strong>CloverDB</strong> relied on the <a href=\"https://github.com/dgraph-io/badger\">Badger</a> key-value store as a storage layer. However, <strong>Badger</strong> is not suitable for every scenario (for example, when the database size is a constraint). This is why, the storage layer of <strong>CloverDB</strong> has been abstracted through a set of interface types to work with any key-value store. At the moment, <strong>CloverDB</strong> can work with both <strong>Badger</strong> and <a href=\"https://github.com/etcd-io/bbolt\">Bolt</a> (by default <strong>Bolt</strong> is used).</p>\n<h2 dir=\"auto\">Installation</h2>\n<p dir=\"auto\">Make sure you have a working Go environment (Go 1.18 or higher is required).</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  GO111MODULE=on go get github.com/ostafen/clover/v2\"><pre class=\"notranslate\">  GO111MODULE=on go get github.com/ostafen/clover/v2</pre></div>\n<h2 dir=\"auto\">Databases and Collections</h2>\n<p dir=\"auto\">CloverDB stores data records as JSON documents, which are grouped together in collections. A database is made up of one or more collections.</p>\n<h3 dir=\"auto\">Database</h3>\n<p dir=\"auto\">To store documents inside collections, you have to open a Clover database using the <code class=\"notranslate\">Open()</code> function.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import (\n  &quot;log&quot;\n  &quot;github.com/dgraph-io/badger/v4&quot;\n  c &quot;github.com/ostafen/clover&quot;\n  badgerstore &quot;github.com/ostafen/clover/v2/store/badger&quot;\n)\n\n...\n\n// by default, Bolt will be used internally\ndb, _ := c.Open(&quot;clover-db&quot;)\n\n// use OpenWithStore() if you want to select a different storage backend\nstore, _ := badgerstore.Open(badger.DefaultOptions(&quot;&quot;).WithInMemory(true)) // opens a badger in memory database\ndb, _ := c.OpenWithStore(store)\n\ndefer db.Close() // remember to close the db when you have done\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> (\n  <span class=\"pl-s\">\"log\"</span>\n  <span class=\"pl-s\">\"github.com/dgraph-io/badger/v4\"</span>\n  c <span class=\"pl-s\">\"github.com/ostafen/clover\"</span>\n  badgerstore <span class=\"pl-s\">\"github.com/ostafen/clover/v2/store/badger\"</span>\n)\n\n<span class=\"pl-c1\">...</span>\n\n<span class=\"pl-c\">// by default, Bolt will be used internally</span>\n<span class=\"pl-s1\">db</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Open</span>(<span class=\"pl-s\">\"clover-db\"</span>)\n\n<span class=\"pl-c\">// use OpenWithStore() if you want to select a different storage backend</span>\n<span class=\"pl-s1\">store</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">badgerstore</span>.<span class=\"pl-c1\">Open</span>(<span class=\"pl-s1\">badger</span>.<span class=\"pl-c1\">DefaultOptions</span>(<span class=\"pl-s\">\"\"</span>).<span class=\"pl-c1\">WithInMemory</span>(<span class=\"pl-c1\">true</span>)) <span class=\"pl-c\">// opens a badger in memory database</span>\n<span class=\"pl-s1\">db</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">OpenWithStore</span>(<span class=\"pl-s1\">store</span>)\n\n<span class=\"pl-k\">defer</span> <span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">Close</span>() <span class=\"pl-c\">// remember to close the db when you have done</span></pre></div>\n<h3 dir=\"auto\">Collections</h3>\n<p dir=\"auto\">CloverDB stores documents inside collections. Collections are the <strong>schemaless</strong> equivalent of tables in relational databases. A collection is created by calling the <code class=\"notranslate\">CreateCollection()</code> function on a database instance. New documents can be inserted using the <code class=\"notranslate\">Insert()</code> or <code class=\"notranslate\">InsertOne()</code> methods. Each document is uniquely identified by a <strong>Version 4 UUID</strong> stored in the <strong>_id</strong> special field and generated during insertion.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"db, _ := c.Open(&quot;clover-db&quot;)\ndb.CreateCollection(&quot;myCollection&quot;) // create a new collection named &quot;myCollection&quot;\n\n// insert a new document inside the collection\ndoc := c.NewDocument()\ndoc.Set(&quot;hello&quot;, &quot;clover!&quot;)\n\n// InsertOne returns the id of the inserted document\ndocId, _ := db.InsertOne(&quot;myCollection&quot;, doc)\nfmt.Println(docId)\"><pre class=\"notranslate\"><span class=\"pl-s1\">db</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Open</span>(<span class=\"pl-s\">\"clover-db\"</span>)\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">CreateCollection</span>(<span class=\"pl-s\">\"myCollection\"</span>) <span class=\"pl-c\">// create a new collection named \"myCollection\"</span>\n\n<span class=\"pl-c\">// insert a new document inside the collection</span>\n<span class=\"pl-s1\">doc</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewDocument</span>()\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"hello\"</span>, <span class=\"pl-s\">\"clover!\"</span>)\n\n<span class=\"pl-c\">// InsertOne returns the id of the inserted document</span>\n<span class=\"pl-s1\">docId</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">InsertOne</span>(<span class=\"pl-s\">\"myCollection\"</span>, <span class=\"pl-s1\">doc</span>)\n<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">docId</span>)</pre></div>\n<h3 dir=\"auto\">Importing and Exporting Collections</h3>\n<p dir=\"auto\">CloverDB is capable of easily importing and exporting collections to JSON format regardless of the storage engine used.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// dump the content of the &quot;todos&quot; collection in a &quot;todos.json&quot; file\ndb.ExportCollection(&quot;todos&quot;, &quot;todos.json&quot;)\n\n...\n\n// recover the todos collection from the exported json file\ndb.DropCollection(&quot;todos&quot;)\ndb.ImportCollection(&quot;todos&quot;, &quot;todos.json&quot;)\n\ndocs, _ := db.FindAll(c.NewQuery(&quot;todos&quot;))\nfor _, doc := range docs {\n  log.Println(doc)\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// dump the content of the \"todos\" collection in a \"todos.json\" file</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">ExportCollection</span>(<span class=\"pl-s\">\"todos\"</span>, <span class=\"pl-s\">\"todos.json\"</span>)\n\n<span class=\"pl-c1\">...</span>\n\n<span class=\"pl-c\">// recover the todos collection from the exported json file</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">DropCollection</span>(<span class=\"pl-s\">\"todos\"</span>)\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">ImportCollection</span>(<span class=\"pl-s\">\"todos\"</span>, <span class=\"pl-s\">\"todos.json\"</span>)\n\n<span class=\"pl-s1\">docs</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>))\n<span class=\"pl-k\">for</span> <span class=\"pl-s1\">_</span>, <span class=\"pl-s1\">doc</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-k\">range</span> <span class=\"pl-s1\">docs</span> {\n  <span class=\"pl-s1\">log</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>)\n}</pre></div>\n<h2 dir=\"auto\">Queries</h2>\n<p dir=\"auto\">CloverDB is equipped with a fluent and elegant API to query your data. A query is represented by the <strong>Query</strong> object, which allows to retrieve documents matching a given <strong>criterion</strong>. A query can be created by passing a valid collection name to the <code class=\"notranslate\">Query()</code> method.</p>\n<h3 dir=\"auto\">Select All Documents in a Collection</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">FindAll()</code> method is used to retrieve all documents satisfying a given query.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"docs, _ := db.FindAll(c.NewQuery(&quot;myCollection&quot;))\n\ntodo := &amp;struct {\n    Completed bool   `clover:&quot;completed&quot;`\n    Title     string `clover:&quot;title&quot;`\n    UserId    int    `clover:&quot;userId&quot;`\n}{}\n\nfor _, doc := range docs {\n    doc.Unmarshal(todo)\n    log.Println(todo)\n}\"><pre class=\"notranslate\"><span class=\"pl-s1\">docs</span>, <span class=\"pl-s1\">_</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"myCollection\"</span>))\n\n<span class=\"pl-s1\">todo</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">struct</span> {\n    <span class=\"pl-c1\">Completed</span> <span class=\"pl-smi\">bool</span>   <span class=\"pl-s\">`clover:\"completed\"`</span>\n    <span class=\"pl-c1\">Title</span>     <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`clover:\"title\"`</span>\n    <span class=\"pl-c1\">UserId</span>    <span class=\"pl-smi\">int</span>    <span class=\"pl-s\">`clover:\"userId\"`</span>\n}{}\n\n<span class=\"pl-k\">for</span> <span class=\"pl-s1\">_</span>, <span class=\"pl-s1\">doc</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-k\">range</span> <span class=\"pl-s1\">docs</span> {\n    <span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Unmarshal</span>(<span class=\"pl-s1\">todo</span>)\n    <span class=\"pl-s1\">log</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">todo</span>)\n}</pre></div>\n<h3 dir=\"auto\">Filter Documents with Criteria</h3>\n<p dir=\"auto\">In order to filter the documents returned by <code class=\"notranslate\">FindAll()</code>, you have to specify a query Criteria using the <code class=\"notranslate\">Where()</code> method. A Criteria object simply represents a predicate on a document, evaluating to <strong>true</strong> only if the document satisfies all the query conditions.</p>\n<p dir=\"auto\">The following example shows how to build a simple Criteria, matching all the documents having the <strong>completed</strong> field equal to true.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"db.FindAll(c.NewQuery(&quot;todos&quot;).Where(c.Field(&quot;completed&quot;).Eq(true)))\n\n// or equivalently\ndb.FindAll(c.NewQuery(&quot;todos&quot;).Where(c.Field(&quot;completed&quot;).IsTrue()))\"><pre class=\"notranslate\"><span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"completed\"</span>).<span class=\"pl-c1\">Eq</span>(<span class=\"pl-c1\">true</span>)))\n\n<span class=\"pl-c\">// or equivalently</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"completed\"</span>).<span class=\"pl-c1\">IsTrue</span>()))</pre></div>\n<p dir=\"auto\">In order to build very complex queries, we chain multiple Criteria objects by using the <code class=\"notranslate\">And()</code> and <code class=\"notranslate\">Or()</code> methods, each returning a new Criteria obtained by applying the corresponding logical operator.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// find all completed todos belonging to users with id 5 and 8\ndb.FindAll(c.NewQuery(&quot;todos&quot;).Where(c.Field(&quot;completed&quot;).Eq(true).And(c.Field(&quot;userId&quot;).In(5, 8))))\"><pre class=\"notranslate\"><span class=\"pl-c\">// find all completed todos belonging to users with id 5 and 8</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"completed\"</span>).<span class=\"pl-c1\">Eq</span>(<span class=\"pl-c1\">true</span>).<span class=\"pl-c1\">And</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"userId\"</span>).<span class=\"pl-c1\">In</span>(<span class=\"pl-c1\">5</span>, <span class=\"pl-c1\">8</span>))))</pre></div>\n<p dir=\"auto\">Naturally, you can also create Criteria involving multiple fields. CloverDB provides you with two equivalent ways to accomplish this:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"db.FindAll(c.NewQuery(&quot;myCollection&quot;).Where(c.Field(&quot;myField1&quot;).Gt(c.Field(&quot;myField2&quot;))))\n// or, if you prefer\ndb.FindAll(c.NewQuery(&quot;myCollection&quot;).Where(c.Field(&quot;myField1&quot;).Gt(&quot;$myField2&quot;)))\"><pre class=\"notranslate\"><span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"myCollection\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"myField1\"</span>).<span class=\"pl-c1\">Gt</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"myField2\"</span>))))\n<span class=\"pl-c\">// or, if you prefer</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"myCollection\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"myField1\"</span>).<span class=\"pl-c1\">Gt</span>(<span class=\"pl-s\">\"$myField2\"</span>)))</pre></div>\n<h3 dir=\"auto\">Sorting Documents</h3>\n<p dir=\"auto\">To sort documents in CloverDB, you need to use <code class=\"notranslate\">Sort()</code>. It is a variadic function which accepts a sequence of SortOption, each allowing to specify a field and a sorting direction.<br>\nA sorting direction can be one of 1 or -1, respectively corresponding to ascending and descending order. If no SortOption is provided, <code class=\"notranslate\">Sort()</code> uses the <strong>_id</strong> field by default.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Find any todo belonging to the most recent inserted user\ndb.FindFirst(c.NewQuery(&quot;todos&quot;).Sort(c.SortOption{&quot;userId&quot;, -1}))\"><pre class=\"notranslate\"><span class=\"pl-c\">// Find any todo belonging to the most recent inserted user</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindFirst</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Sort</span>(c.<span class=\"pl-smi\">SortOption</span>{<span class=\"pl-s\">\"userId\"</span>, <span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span>}))</pre></div>\n<h3 dir=\"auto\">Skip/Limit Documents</h3>\n<p dir=\"auto\">Sometimes, it can be useful to discard some documents from the output, or simply set a limit on the maximum number of results returned by a query. For this purpose, CloverDB provides the <code class=\"notranslate\">Skip()</code> and <code class=\"notranslate\">Limit()</code> functions, both accepting an integer <math-renderer class=\"js-inline-math\" style=\"display: inline-block\" data-run-id=\"e9e9b47e904c77854253bc6bff5790a6\">$n$</math-renderer> as parameter.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// discard the first 10 documents from the output,\n// also limiting the maximum number of query results to 100\ndb.FindAll(c.NewQuery(&quot;todos&quot;).Skip(10).Limit(100))\"><pre class=\"notranslate\"><span class=\"pl-c\">// discard the first 10 documents from the output,</span>\n<span class=\"pl-c\">// also limiting the maximum number of query results to 100</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Skip</span>(<span class=\"pl-c1\">10</span>).<span class=\"pl-c1\">Limit</span>(<span class=\"pl-c1\">100</span>))</pre></div>\n<h3 dir=\"auto\">Update/Delete Documents</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">Update()</code> method is used to modify specific fields of documents in a collection. The <code class=\"notranslate\">Delete()</code> method is used to delete documents. Both methods belong to the Query object, so that it is easy to update and delete documents matching a particular query.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// mark all todos belonging to user with id 1 as completed\nupdates := make(map[string]interface{})\nupdates[&quot;completed&quot;] = true\n\ndb.Update(c.NewQuery(&quot;todos&quot;).Where(c.Field(&quot;userId&quot;).Eq(1)), updates)\n\n// delete all todos belonging to users with id 5 and 8\ndb.Delete(c.NewQuery(&quot;todos&quot;).Where(c.Field(&quot;userId&quot;).In(5,8)))\"><pre class=\"notranslate\"><span class=\"pl-c\">// mark all todos belonging to user with id 1 as completed</span>\n<span class=\"pl-s1\">updates</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">make</span>(<span class=\"pl-k\">map</span>[<span class=\"pl-smi\">string</span>]<span class=\"pl-k\">interface</span>{})\n<span class=\"pl-s1\">updates</span>[<span class=\"pl-s\">\"completed\"</span>] <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">Update</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"userId\"</span>).<span class=\"pl-c1\">Eq</span>(<span class=\"pl-c1\">1</span>)), <span class=\"pl-s1\">updates</span>)\n\n<span class=\"pl-c\">// delete all todos belonging to users with id 5 and 8</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">Delete</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"todos\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"userId\"</span>).<span class=\"pl-c1\">In</span>(<span class=\"pl-c1\">5</span>,<span class=\"pl-c1\">8</span>)))</pre></div>\n<p dir=\"auto\">To update or delete a single document using a specific document id, use <code class=\"notranslate\">UpdateById()</code> or <code class=\"notranslate\">DeleteById()</code>, respectively:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"docId := &quot;1dbce353-d3c6-43b3-b5a8-80d8d876389b&quot;\n// update the document with the specified id\ndb.UpdateById(&quot;todos&quot;, docId, map[string]interface{}{&quot;completed&quot;: true})\n// or delete it\ndb.DeleteById(&quot;todos&quot;, docId)\"><pre class=\"notranslate\"><span class=\"pl-s1\">docId</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s\">\"1dbce353-d3c6-43b3-b5a8-80d8d876389b\"</span>\n<span class=\"pl-c\">// update the document with the specified id</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">UpdateById</span>(<span class=\"pl-s\">\"todos\"</span>, <span class=\"pl-s1\">docId</span>, <span class=\"pl-k\">map</span>[<span class=\"pl-smi\">string</span>]<span class=\"pl-k\">interface</span>{}{<span class=\"pl-s\">\"completed\"</span>: <span class=\"pl-c1\">true</span>})\n<span class=\"pl-c\">// or delete it</span>\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">DeleteById</span>(<span class=\"pl-s\">\"todos\"</span>, <span class=\"pl-s1\">docId</span>)</pre></div>\n<h2 dir=\"auto\">Indexes</h2>\n<p dir=\"auto\">In CloverDB, indexes support the efficient execution of queries. Without indexes, a collection must be fully scanned to select those documents matching a given query. An index is a special data structure storing the values of a specific document field (or set of fields), sorted by the value of the field itself. This means that they can be exploited to supports efficient equality matches and range-based queries.<br>\nMoreover, when documents are iterated through an index, results can be returned in sorted order without performing any additional sorting step.<br>\nNote however that using indexes is not completely for free. Apart from increasing disk space, indexes require additional cpu-time during each insert and update/delete operation. Moreover, when accessing a document through an index, two disk reads must be performed, since indexes only store a reference (the document id) to the actual document. As a consequence, the speed-up is sensitive only when the specified criteria is used to access a restricted set of documents.</p>\n<h3 dir=\"auto\">Creating an index</h3>\n<p dir=\"auto\">Currently, CloverDB only support single-field indexes. An index can be created simply by calling the <code class=\"notranslate\">CreateIndex()</code> method, which takes both the names of the collection and the field to be indexed.</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"db.CreateIndex(&quot;myCollection&quot;, &quot;myField&quot;)\"><pre class=\"notranslate\"><span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">CreateIndex</span>(<span class=\"pl-s\">\"myCollection\"</span>, <span class=\"pl-s\">\"myField\"</span>)</pre></div>\n<p dir=\"auto\">Assume you have the following query:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"criteria := c.Field(&quot;myField&quot;).Gt(a).And(c.Field(&quot;myField&quot;).Lt(b))\ndb.FindAll(c.NewQuery(&quot;myCollection&quot;).Where(criteria).Sort(c.SortOption{&quot;myField&quot;, -1}))\"><pre class=\"notranslate\"><span class=\"pl-s1\">criteria</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"myField\"</span>).<span class=\"pl-c1\">Gt</span>(<span class=\"pl-s1\">a</span>).<span class=\"pl-c1\">And</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">Field</span>(<span class=\"pl-s\">\"myField\"</span>).<span class=\"pl-c1\">Lt</span>(<span class=\"pl-s1\">b</span>))\n<span class=\"pl-s1\">db</span>.<span class=\"pl-c1\">FindAll</span>(<span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewQuery</span>(<span class=\"pl-s\">\"myCollection\"</span>).<span class=\"pl-c1\">Where</span>(<span class=\"pl-s1\">criteria</span>).<span class=\"pl-c1\">Sort</span>(c.<span class=\"pl-smi\">SortOption</span>{<span class=\"pl-s\">\"myField\"</span>, <span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span>}))</pre></div>\n<p dir=\"auto\">where <strong>a</strong> and <strong>b</strong> are values of your choice. CloverDB will use the created index both to perform the range query and to return results in sorted order.</p>\n<h2 dir=\"auto\">Data Types</h2>\n<p dir=\"auto\">Internally, CloverDB supports the following primitive data types: <strong>int64</strong>, <strong>uint64</strong>, <strong>float64</strong>, <strong>string</strong>, <strong>bool</strong> and <strong>time.Time</strong>. When possible, values having different types are silently converted to one of the internal types: signed integer values get converted to int64, while unsigned ones to uint64. Float32 values are extended to float64.</p>\n<p dir=\"auto\">For example, consider the following snippet, which sets an uint8 value on a given document field:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"doc := c.NewDocument()\ndoc.Set(&quot;myField&quot;, uint8(10)) // &quot;myField&quot; is automatically promoted to uint64\n\nfmt.Println(doc.Get(&quot;myField&quot;).(uint64))\"><pre class=\"notranslate\"><span class=\"pl-s1\">doc</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewDocument</span>()\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"myField\"</span>, <span class=\"pl-s1\">uint8</span>(<span class=\"pl-c1\">10</span>)) <span class=\"pl-c\">// \"myField\" is automatically promoted to uint64</span>\n\n<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Get</span>(<span class=\"pl-s\">\"myField\"</span>).(<span class=\"pl-smi\">uint64</span>))</pre></div>\n<p dir=\"auto\">Pointer values are dereferenced until either <strong>nil</strong> or a <strong>non-pointer</strong> value is found:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var x int = 10\nvar ptr *int = &amp;x\nvar ptr1 **int = &amp;ptr\n\ndoc.Set(&quot;ptr&quot;, ptr)\ndoc.Set(&quot;ptr1&quot;, ptr1)\n\nfmt.Println(doc.Get(&quot;ptr&quot;).(int64) == 10)\nfmt.Println(doc.Get(&quot;ptr1&quot;).(int64) == 10)\n\nptr = nil\n\ndoc.Set(&quot;ptr1&quot;, ptr1)\n// ptr1 is not nil, but it points to the nil &quot;ptr&quot; pointer, so the field is set to nil\nfmt.Println(doc.Get(&quot;ptr1&quot;) == nil)\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">x</span> <span class=\"pl-smi\">int</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">ptr</span> <span class=\"pl-c1\">*</span><span class=\"pl-smi\">int</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-s1\">x</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">ptr1</span> <span class=\"pl-c1\">*</span><span class=\"pl-c1\">*</span><span class=\"pl-smi\">int</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-s1\">ptr</span>\n\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"ptr\"</span>, <span class=\"pl-s1\">ptr</span>)\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"ptr1\"</span>, <span class=\"pl-s1\">ptr1</span>)\n\n<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Get</span>(<span class=\"pl-s\">\"ptr\"</span>).(<span class=\"pl-smi\">int64</span>) <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">10</span>)\n<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Get</span>(<span class=\"pl-s\">\"ptr1\"</span>).(<span class=\"pl-smi\">int64</span>) <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">10</span>)\n\n<span class=\"pl-s1\">ptr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">nil</span>\n\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"ptr1\"</span>, <span class=\"pl-s1\">ptr1</span>)\n<span class=\"pl-c\">// ptr1 is not nil, but it points to the nil \"ptr\" pointer, so the field is set to nil</span>\n<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Get</span>(<span class=\"pl-s\">\"ptr1\"</span>) <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">nil</span>)</pre></div>\n<p dir=\"auto\">Invalid types leaves the document untouched:</p>\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"doc := c.NewDocument()\ndoc.Set(&quot;myField&quot;, make(chan struct{}))\n\nlog.Println(doc.Has(&quot;myField&quot;)) // will output false\"><pre class=\"notranslate\"><span class=\"pl-s1\">doc</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">c</span>.<span class=\"pl-c1\">NewDocument</span>()\n<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Set</span>(<span class=\"pl-s\">\"myField\"</span>, <span class=\"pl-s1\">make</span>(<span class=\"pl-k\">chan</span> <span class=\"pl-k\">struct</span>{}))\n\n<span class=\"pl-s1\">log</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s1\">doc</span>.<span class=\"pl-c1\">Has</span>(<span class=\"pl-s\">\"myField\"</span>)) <span class=\"pl-c\">// will output false</span></pre></div>\n<h2 dir=\"auto\">Contributing</h2>\n<p dir=\"auto\"><strong>CloverDB</strong> is actively developed. Any contribution, in the form of a suggestion, bug report or pull request, is well accepted 😊</p>\n<p dir=\"auto\">Contributions and suggestions have been gratefully received from the following users:</p>\n<a href=\"https://github.com/ostafen/clover/graphs/contributors\">\n  <img src=\"https://camo.githubusercontent.com/1f3a1a375a1497d7509d16e4b386ef07b529a9b749ce6024cd4d06859abe2430/68747470733a2f2f636f6e747269622e726f636b732f696d6167653f7265706f3d6f73746166656e2f636c6f766572\" data-canonical-src=\"https://contrib.rocks/image?repo=ostafen/clover\" style=\"max-width: 100%;\">\n</a>\n<p dir=\"auto\">Made with <a href=\"https://contrib.rocks\" rel=\"nofollow\">contrib.rocks</a>.</p>","updatedAt":"2025-05-21T15:52:35Z","upvoteCount":null,"author":{"login":"eryajf","avatarUrl":"https://avatars.githubusercontent.com/u/33259379?u=e4a4090a38ac2473aaed4ef9945233636776c6c3&v=4","url":"https://github.com/eryajf"},"category":null,"labels":{"edges":[{"node":{"name":"更多","color":"25B472"}},{"node":{"name":"Database","color":"3fbc9d"}},{"node":{"name":"ostafen","color":"062677"}}]},"comments":{"edges":[]}}},"pageContext":{"number":87,"previous":{"title":"apache/cloudstack: Apache CloudStack是一个开源的基础设施即服务（IaaS）云计算平台。","number":86},"next":{"title":"veops/cmdb: 简单、轻量、通用的运维配置管理数据库","number":88}}},
    "staticQueryHashes": ["151096407","2861350382"]}