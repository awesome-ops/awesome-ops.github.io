{
    "componentChunkName": "component---src-templates-issues-tsx",
    "path": "/issues/371",
    "result": {"data":{"issuesJson":{"id":"a1accb45-3dbf-5d47-9483-5eec64423ef6","title":"songquanpeng/message-pusher: 搭建专属于你的消息推送服务，支持多种消息推送方式，支持 Markdown，仅单可执行文件，开箱即用","number":371,"bodyHTML":"<div align=\"center\" dir=\"auto\">\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a><br><br></p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th align=\"right\">Repos</th>\n<th align=\"left\"><a href=\"https://github.com/songquanpeng/message-pusher\">songquanpeng/message-pusher</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><strong>Views</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/bbf785cf9e4b40c2859f4dd90bd0c59453e22709c97ee0905bcddcaeb8d16cb7/68747470733a2f2f76696577732e77686174696c656172656e65642e746f6461792f76696577732f6769746875622f736f6e677175616e70656e672f6d6573736167652d7075736865722e737667\" alt=\"views\" data-canonical-src=\"https://views.whatilearened.today/views/github/songquanpeng/message-pusher.svg\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Stars</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/d25104ca33866d86147c7669e4e845c095f57a1a4ae5772ff31ab7f047874ce5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f736f6e677175616e70656e672f6d6573736167652d7075736865723f636f6c6f723d663266303864266c6f676f3d556e64657274616c65266c6f676f436f6c6f723d656234363330\" alt=\"stars\" data-canonical-src=\"https://img.shields.io/github/stars/songquanpeng/message-pusher?color=f2f08d&amp;logo=Undertale&amp;logoColor=eb4630\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>Forks</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/b14137215d11d7b33a52818bfd856ad769817dcd561f4051c54cd4ea5d00a2d2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f736f6e677175616e70656e672f6d6573736167652d7075736865723f636f6c6f723d626138366562266c6f676f3d48616e647368616b65266c6f676f436f6c6f723d656136616136\" alt=\"forks\" data-canonical-src=\"https://img.shields.io/github/forks/songquanpeng/message-pusher?color=ba86eb&amp;logo=Handshake&amp;logoColor=ea6aa6\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>License</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/9fdcfb7ec0544fd944cbec4ce42a5a3f4d79af38adc238b18d3d6d520019da02/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736f6e677175616e70656e672f6d6573736167652d7075736865723f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e53556845556741414144414141414177434159414141425841766d48414141414358424957584d41414173544141414c457745416d70775941414144336b6c45515652346e4f335953557a5555426748384a726f57567255474a66456d3773584e63534446784d544c327069347348456778654e526f77586770455742445552522532424e414e4f4b4f4b36366f6f4b4a4742586545475263574163455646475152484677516d483525324630774861655748493944554455354c356b6e6568644f62377a66652532423139636e434a47495243516945596c514237594a4979474c38616f73756c565a36695246516a69474b6b7564576735614c6c704f70704e586e665071773555304459524a6d56786a4367464633424c755a476d416f5655694b4541726d583744375553677351706f72674761336748664b34483663754262435644334771683141352532424c6745253242467749656e514d306a6f446f66714c6f48564e7742796d384370546e416d327a51713073676478624964515a556c416b7150415a3664676a303541446f59526f6f66792532466f5869726f376b3551586a4c6f70677a4b69514e6c4c4461716f4967754577426a7a7150355066446a45394479495879493633464d547751464d43567271774e61763451666f52673538514625324266724d485172454b3844546f434d714e4179574e4866786d54526f4c4f726d5352566747744466714345715a4f4851727a6f34706243557341333431365169364551394b476a6345465267484f724f4b6e5536574162396247455459656b4b7843766a546167394534706a653534446b3551503862624d4859762532464333756541654a6b50304f4778422532424a70426e4172595238455951516e6f4e31414e4661426e5050356c385372736559514c303641646b30464a5938484f5761424d6c6541486a683068506f73497a6c6f3876304125324633345a694f6548726130714b52504d5653493774762532423932747725324676687855654252713456454c674d376642714b354770526d6f514c584e7075625475367a6f4e52706754386e5051627138347764253246494375767978694b4871694e41664933774d367549684271476b4c696977414f734b44714f68743749747239567938536a52424557667941627225324668523142667056514664484a42253246423268683778376a36517077435665655951326b72554235436c636a3641326d3067576a25324244306d4c34397a573563517943484c4e37726a6c6d6d6174457958582532464372547a412532466f51785a6b576c39474a5443566f25324279546a3837253242346769504b6376307149486f344156344430565a727251493334706e70524d36357875652532467a417265453425324654253246536f676c664542794d7369517441546c4c3352414a355948725378365a44665337307337754d486842705225324659423573305057366f455270316236253246667252684b3353444c35546965364f515548516c5133735644752532427a50636b397657453973747225324236496a533967486d5750616861444a25324277434b364e494242587348423948796b587378774470686c436d416476706c6162554a4e6e5a504239342532464e7436784f6538587a4562503257684d335741673147756236744825324233513150673337365239713475716c6e6f36676448476a444f5139306562303141484d3672596975554a314f713472344656756a35765239427a4d3957674e764f7977446869495951467667626366774166774d764863615067425041253246447948476a50624e394138616d6562636477416444354e6633373574787165774e5552656f797677424958594c645170576c6877465771745061435044334173467541535636717171496c62304a766b564331464c39576b4c55556c55574b337a585a4c46432532423125324642726f46746f364f7358497545594a5034447a7a5732594656316f4a614141414141456c46546b5375516d4343\" alt=\"license\" data-canonical-src=\"https://img.shields.io/github/license/songquanpeng/message-pusher?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAD3klEQVR4nO3YSUzUUBgH8JroWVrUGJfEm7sXNcSDFxMTL2pi4sHEgxeNRowXgpEWBDURR%2BNANOKOK66ooKJGBXeEGRcWAcEVFGQRHFwQmH5%2F0wHaeWHI9DUDU5L5knehdOb7zfe%2B19cnCJGIRCQiEYlQB7YJIyGL8aosulVZ6iRFQjiGKkudWg5aLlpOppNXnfPqw5U0DYRJmVxjCgFF3BLuZGmAoVUiKEArmX7D7USgsQporgGa3gHfK4H6cuBbCVD3Gqh1A5%2BLgE%2BFwIenQM0joDofqLoHVNwBym8CpTnAm2zQq0sgdxbIdQZUlAkqPAZ6dgj05ADoYRoofy%2FoXiro7k5QXjLopgzKiQNlLDaqoIguEwBjzqP5PfDjE9DyIXyI63FMTwQFMCVrqwNav4QfoRg58QF%2BfrMHQrEK8DToCMqNAyWNHfxmTRoLOrmSRVgGtDfqCEqZOHQrzo4pbCUsA3416Qi6EQ9KGjcEFRgHOrOKnU6WAb9bGETYekKxCvjTag9E4pje54Dk5QP8bbMHYv%2FC3ueAeJkP0OGxB%2BJpBnArYR8EYQQnoN1ANFaBnPP5l8SrseYQL06Adk0FJY8HOWaBMleAHjh0hPosIzlo8v0A%2F34ZiOeHra0qKRPMVSI7tv%2B92tw%2FvhxUeBRq4VELgM7fBqK5GpRmoQLXNpubTu6zoNRpgT8nPQbq84wd%2FICuvyxiKHqiNAfI3wM6uIhBqGkLiiwAOsKDqOht7Itr9Vy8SjRBEWfyAbr%2FhR1BfpVQFdHJB%2FB2hh7x7j6QpwCVeeYQ2krUB5Clcj6A2m0gWj%2BD0mL49zW5cQyCHLN7rjlmmatEyXX%2FCrTzA%2FoQxZkWl9GJTCVo%2ByTj87%2B4giPKcv0qIHo4AV4D0VZrrQI34pnpRM65xue%2FzAreE4%2FT%2FSoglfEByMsiQtATlL3RAJ5YHrSx6ZDfS70s7uMHhBpR%2FYB5s0PW6oERp1b6%2FfrRhK3SDL5Tie6OQUHQlQ3sVDu%2BzPck9vWE9str%2B6IjS9gHmWPahaDJ%2BwCK6NIBBXsHB9HykXsxwDphlCmAdvplabUJNnZPB94%2FNt6xOe8XzEbP2WhM3WAg1Gub6tH%2B3Q1Pg376R9q4uqlno6gdHGjDOQ90eb01AHM6rYiuUJ1Oq4r4FVuj5vR9BzM9WgNvOywDhiIYQFvgbcfwAfwMvHcaPgBPA%2FDyHGjPbN9A8amebcdwAdD5Nf375txqewNUReoyvwBIXYLdQpWlhwFWqtPaCPD3AsFuASV6qqqIlb0JvkVC1FL9WkLUUlUWK3zXZLFC%2B1%2FBroFto6OsXIuEYJP4DzzW2YFV1oJaAAAAAElFTkSuQmCC\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>UpdatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/33199fcf93b95fb04abf3479c369739ba53e0e3c1c99c2f7121aaf80bb35606d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f736f6e677175616e70656e672f6d6573736167652d7075736865723f646973706c61795f74696d657374616d703d636f6d6d6974746572266c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d557064617465644174\" alt=\"last-commit\" data-canonical-src=\"https://img.shields.io/github/last-commit/songquanpeng/message-pusher?display_timestamp=committer&amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=UpdatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n<tr>\n<td align=\"right\"><strong>CreatedAt</strong></td>\n<td align=\"left\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/90c57da58f629439637de07f62fb1c8449fb34d283928ac312357e4906c0dba9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f637265617465642d61742f736f6e677175616e70656e672f6d6573736167652d7075736865723f6c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414234414141416543415941414141374d4b3669414141414358424957584d41414173544141414c457745416d7077594141414648556c45515652346e4c5658375539615678776d3236646c582532466468627825324232253246516e626b7655627264554151674a4a496655444e574454546d4f76314651554661504a346b7573725630314a7431734e70637453327533626f745a746d786439744a5346536f714b71494635625944464c436f76436c656673747a4a387758524c445a4c7a6e6b634f343535376e3364332532466e655a3472454f515a74315771462532423858467234253242664f4c4565326a6f59307a776638546f795a50766a45676b4c592532426b306d6d72584f36644b696e787a476b30666a5430782532425279723055716e6359637a4d317263347451253242497270324c4758646f344e4334567657715453373277716c632532427231334f527269364b6458646e624f484c6c776c7a4a70524b6e3657342532424b36706f4f434e6e494166486a253246253242776168495a4234764b6e715a6630714a704e49716c2532467638545530634e6c3572627963337730516e54703379324c54614a374d314e617844723266526e315370504736476961323174664533345463614f617931694d55564f5146624659714957536f31573854694156616e43306576584f4542375770313448466232327a453566714c4f433545524c515769644e614e49347545636339693768634a6c644868324e57725135674464624f6c7061756d49754c62326174415144506e7a3062384e6257636d785656524a33486d7870536377777a4f4a6d4b44524765384c6c435a444c4739673754496e5631516c376462586256316533675430574b697243466f6d6b5079767758466c5a474a4f6a563625324253743634757564445a4f55354555636f782532464d455144567674364d62634e3237593341797a687633737061557242365a3971724a534f3139657a6a387032704c426b4a792532426343484a7857493567573574636652527a31645531394766476b6f7539505a4f34736d52396a4746777065783444793362766e6d4b79706f74625531335669646a71595a68726a343972764d457425324625324659714c7a396430304e6a57253246637a67796f394f35317a7336614e6c6f354644747530445a675146686c47584a30644241446f4e6864367576703657686f617967374e394c564748386d443462253246486e667455516f4e4734764c51306769784d716c5725324234714f6a744e48446733723166365969525347785279375576714c62395534716b716e78504f4e7661356c447048723125324279794b524e4b57425a793565644d554842326d3572792532422532424551772532427a6766347a6f39253246306f634e3357527a4c4277344a2532424a7950574372716d4967475974554f735744346f785a46516f50556a4770564871493425324661666b51504336665a5165654d31253242764c7549516e6a754257514444437363726d485039656f4e5041744271664f6e5875614b25324268364a45624772732532427076764d6d78654962683836336162565065597953456f39464a48704e4d464a59253242503563575a6b6667374f3174537759436553514c54593345385130392532464256504a556c78516a7368543142736343593032723955445542667643484236367063665041336c794165336e6772332532463437584467614a7a736c7937787741364e5a746c555550437541487161536a5549502532427375653842525741432532464e6651374a5a505a35397330476a3756747049537a34685125324243706658474d4b685a63764c70554b7866574d386f68766637702532464f446a4842666356463849736b383267314648796b63564645253242555a414158343761452532464d6c34504f3530506e75683025324678346e6d637957507364774468427836436d6b4c562532466746446a594b784f4a4f4674623077517949684c39527943774b33414f664947703159464542686e4d4a634c525745624b644b516f55366e63545a6b494544696341792532463831645675454d3552775066657934784f7830496b25324649324e6e466b692532425761664f6f464959466367595a43797864376543556a626334416d46363566742532466b4d686b336f25324235686337734d4a79716a4a45477659466151464972375930775077384246415925324236253242766d6b3377367a7a5275444d6d5a5652736668385274413075455453443775434254364459514e36697665553066706b594c6a453671725672744f78654e4b553954484c5a4a396b4255324a427342685635416976422532466f4b61514e4b675043427744596149665a4334616454684f71463457454e56694c4a77566f586f62664c424b56773637414f6154734c6336355461564b32317651344c613939654b6359673576627873624f627a5451394e37554b4467554f3177446a6944494942736868357a746733396e514d4c535a4248344f7a424f55444551586d323036643366634c67737762585141345068634b336e6873775531427a3877765130395248472532466f597933656a6677424e6d746f59714c4130586741414141424a52553545726b4a676767253344253344266c6162656c3d437265617465644174\" alt=\"create-at\" data-canonical-src=\"https://img.shields.io/github/created-at/songquanpeng/message-pusher?logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHUlEQVR4nLVX7U9aVxwm26dlX%2Fdhbx%2B2%2FQnbkvUbrdUAQgJJIfUDNWDTTmOv1FQUFaPJ4kusrV01Jt1sNpctS2u3botZtmxd9tJSFSoqKqIF5bYDFLCovClefstzJ8wXRLDZLznkcO4557n3d3%2FneZ4rEOQZt1WqF%2B8XFr4%2BfOLEe2joY0zwf8ToyZPvjEgkLY%2Bk0mmrXO6dKinxzGk0fjT0x%2BRyr0UqncYczM1rc4tQ%2BIrp2LGXdo4NC4VvWqTS72wqlc%2Br13ORri6KdXdnbOHLlwlzJpRKn6W4%2BK6poOCNnIAfHj%2F%2BwahIZB4vKnqZf0qJpNIql%2Fv8TU0cNl5rbyc3w0QnTp3y2LTaJ7M1NaxDr2fRn1SpPG6Gia21tfE34TcaOay1iMUVOQFbFYqIWSo1W8TiAVanC0evXOEB7Wp14HFb22zE5fqLOC5ERLQWidNaNI4uEcc9i7hcJldHh2NWrQ5gDdbOlpaumIuLb2atAQDPnz0b8NbWcmxVVRJ3HmxpScwwzOJmKDRGe8LlCZDLG9g7TInV1Ql7dbXbV1e3gT0WKirCFomkPyvwXFlZGJOjV6%2BSt64uudDZOU5EUcox%2FMEQDVvt6MbcN27Y3Ayzhv3spaUrB6Z9qrJSO19ezj8p2pLBkJy%2BcCHJxWI5gW5tcfRRz1dU19GfGkou9PZO4smR9jGFwpex4Dy3bvnmKypotbU13VidjqYZhrj49rvMEt%2F%2FYqLz9d00NjW%2Fczgyo9O51zs6aNlo5FDtu0DZgQFhlGXJ0dBADoNhd6uvp6Whoayg7N9LVGH8mD4b%2FHnftUQoNG4vLQ0gixMqlW%2B4qOjtNHDg3r1f6YiRSGxRy7UvqLb9U4qkqnxPONva5lDpHr1%2ByyKRNKWBZy5edMUHB2m5ry%2B%2BEQw%2Bzgf4zo9%2F0ocN3WRzLBw4J%2BJyPWCrqmIgGYtUOsWD4oxZFQoPUjGpVHqI4%2FafkQPC6fZQeeM1%2BvLuIQnjuBWQDDCscrmHP9eoNPAtBqfOnXuaK%2Bh6JEbGrs%2BpvvMmxeIbh863abVPeYySEo9FJHpNMFJY%2BP5cWZkfg7O1tSwYCeSQLTY3E8Q09%2FBVPJUlxQjshT1BscCY02r9UDUBfvCHB66pcfPA3lyAe3ngr3%2F47XDgaJzsly7xwA6NZtlUUPCuAHqaSjUIP%2Bsue8BRWAC%2FNfQ7JZPZ59s0Gj7VtpISz4hQ%2BCpfXGMKhZcvLpUKxfWM8ohvf7p%2FODjHBfcVF8Isk82g1FHykcVFE%2BUZAAX47aE%2FMl4PO50Pnuh0%2Fx4nmcyWPsdwDhBx6CmkLV%2FgFDjYKxOJOFtb0wQyIhL9RyCwK3AOfIGp1YFEBhnMJcLRWEbKdKQoU6ncTZkIEDicAy%2F81dVuEM5RwPfey4xOx0Ik%2FI2NnFki%2BWafOoFIYFcgYZCyxd7eCUjbc4AmF65ft%2FkMhk3o%2B5hc7sMJyqjJEGvYFaQFIr7Y0wPw8BFAY%2B6%2Bvmk3w6zzRuDMmZVRsfh8RtA0uETSD7uCBT6DYQN6iveU0fpkYLjE6qrVrtOxeNKU9THLZJ9kBU2JBsBhV5AivB%2FoKaQNKgPCBwDYaIfZC4adThOqF4WENViLJwVoXobfLBKVw67AOaTsLc65TaVK21vQ4La99eKcYg5vbxsbObzTQ9N7UKDgUO1wDjiDIIBshh5ztg39nQMLSZBH4OzBOUDEQXm206d3fcLgswbXQA4PhcK3nhswU1Bz8wvQ09RHG%2FoYy3ejfwBNmtoYqLA0XgAAAABJRU5ErkJggg%3D%3D&amp;label=CreatedAt\" style=\"max-width: 100%;\"></a></td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<a href=\"https://github.com/opsre/awesome-ops\">\n</a><p dir=\"auto\"><a href=\"https://github.com/opsre/awesome-ops\"><img src=\"https://camo.githubusercontent.com/b964a36ea4078c39f603d46a29436371c7541a2f26e0228d7b21b9d9805b43d3/68747470733a2f2f736f6369616c6966792e6769742e63692f6f707372652f617765736f6d652d6f70732f696d6167653f6465736372697074696f6e3d3126666f6e743d42697474657226666f726b733d31266973737565733d31266c616e67756167653d31266c6f676f3d6874747073253341253246253246617661746172732e67697468756275736572636f6e74656e742e636f6d25324675253246313838353638303230266e616d653d31266f776e65723d31267061747465726e3d436972637569742b426f6172642670756c6c733d31267374617267617a6572733d31267468656d653d4c69676874\" alt=\"\" data-canonical-src=\"https://socialify.git.ci/opsre/awesome-ops/image?description=1&amp;font=Bitter&amp;forks=1&amp;issues=1&amp;language=1&amp;logo=https%3A%2F%2Favatars.githubusercontent.com%2Fu%2F188568020&amp;name=1&amp;owner=1&amp;pattern=Circuit+Board&amp;pulls=1&amp;stargazers=1&amp;theme=Light\" style=\"max-width: 100%;\"></a></p>\n<a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\"><img src=\"https://camo.githubusercontent.com/a15b413168923d02e21292705ceaf86b92675f98e250c5c896a02ba7504a6eae/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f657279616a662f7475406d61696e2f696d672f696d6167655f32303234303432305f3231343430382e676966\" width=\"100%\" height=\"3\" data-animated-image=\"\" data-canonical-src=\"https://cdn.jsdelivr.net/gh/eryajf/tu@main/img/image_20240420_214408.gif\" style=\"max-width: 100%; height: auto; max-height: 3px;\"></a>\n</div>\n<p align=\"center\" dir=\"auto\">\n  <a href=\"https://github.com/songquanpeng/message-pusher\"><img src=\"https://raw.githubusercontent.com/songquanpeng/message-pusher/master/web/public/logo.png\" width=\"150\" height=\"150\" alt=\"message-pusher logo\" style=\"max-width: 100%; height: auto; max-height: 150px;\"></a>\n</p>\n<div align=\"center\" dir=\"auto\">\n<h1 dir=\"auto\">消息推送服务</h1>\n<p dir=\"auto\"><em>✨ 搭建专属于你的消息推送服务，支持多种消息推送方式，支持 Markdown，仅单可执行文件，开箱即用✨</em></p>\n</div>\n<p align=\"center\" dir=\"auto\">\n  <a href=\"https://raw.githubusercontent.com/songquanpeng/message-pusher/main/LICENSE\" rel=\"nofollow\">\n    <img src=\"https://camo.githubusercontent.com/d79b65a6df140348b700c8c340f4988c72c4bfbafe5b823d43cc119d68eac816/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736f6e677175616e70656e672f6d6573736167652d7075736865723f636f6c6f723d627269676874677265656e\" alt=\"license\" data-canonical-src=\"https://img.shields.io/github/license/songquanpeng/message-pusher?color=brightgreen\" style=\"max-width: 100%;\">\n  </a>\n  <a href=\"https://github.com/songquanpeng/message-pusher/releases/latest\">\n    <img src=\"https://camo.githubusercontent.com/14a18558fc1e3f8dbe8e1afa0ab152739e2e569269ba289eb6edcb9e412020d5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f736f6e677175616e70656e672f6d6573736167652d7075736865723f636f6c6f723d627269676874677265656e26696e636c7564655f70726572656c6561736573\" alt=\"release\" data-canonical-src=\"https://img.shields.io/github/v/release/songquanpeng/message-pusher?color=brightgreen&amp;include_prereleases\" style=\"max-width: 100%;\">\n  </a>\n  <a href=\"https://hub.docker.com/repository/docker/justsong/message-pusher\" rel=\"nofollow\">\n    <img src=\"https://camo.githubusercontent.com/d3923acdaf017cab8e9eb998dc41205a2c4f5c3c5e4a7232c47875f4eebfab4e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6a757374736f6e672f6d6573736167652d7075736865723f636f6c6f723d627269676874677265656e\" alt=\"docker pull\" data-canonical-src=\"https://img.shields.io/docker/pulls/justsong/message-pusher?color=brightgreen\" style=\"max-width: 100%;\">\n  </a>\n  <a href=\"https://github.com/songquanpeng/message-pusher/releases/latest\">\n    <img src=\"https://camo.githubusercontent.com/634a596b18176522fc1c209ae7cc43fc805eb97d4e890eb5392dc19d04a00a6d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f736f6e677175616e70656e672f6d6573736167652d7075736865722f746f74616c3f636f6c6f723d627269676874677265656e26696e636c7564655f70726572656c6561736573\" alt=\"release\" data-canonical-src=\"https://img.shields.io/github/downloads/songquanpeng/message-pusher/total?color=brightgreen&amp;include_prereleases\" style=\"max-width: 100%;\">\n  </a>\n  <a href=\"https://goreportcard.com/report/github.com/songquanpeng/message-pusher\" rel=\"nofollow\">\n    <img src=\"https://camo.githubusercontent.com/4f452d95ff86b6a0a9a795911bc9acb55e229d70c90729339006be02f2cddddd/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f736f6e677175616e70656e672f6d6573736167652d707573686572\" alt=\"GoReportCard\" data-canonical-src=\"https://goreportcard.com/badge/github.com/songquanpeng/message-pusher\" style=\"max-width: 100%;\">\n  </a>\n</p>\n<p align=\"center\" dir=\"auto\">\n  <a href=\"https://github.com/songquanpeng/message-pusher/releases\">程序下载</a>\n  ·\n  <a href=\"#部署\">部署教程</a>\n  ·\n  <a href=\"#用法\">使用教程</a>\n  ·\n  <a href=\"https://github.com/songquanpeng/message-pusher/issues\">意见反馈</a>\n  ·\n  <a href=\"https://message-pusher.onrender.com/\" rel=\"nofollow\">在线演示</a>\n</p>\n<blockquote>\n<p dir=\"auto\"><strong>Note</strong>：官方部署站 <a href=\"https://msgpusher.com\" rel=\"nofollow\">https://msgpusher.com</a> 现已上线，当前开放注册，欢迎使用。如果收到积极反馈未来可以考虑换用延迟更低的服务器。</p>\n</blockquote>\n<blockquote>\n<p dir=\"auto\"><strong>Warning</strong>：从 <code class=\"notranslate\">v0.3</code> 版本升级到 <code class=\"notranslate\">v0.4</code> 版本需要手动迁移数据库，具体方法见<a href=\"#%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93\">迁移数据库</a>。</p>\n</blockquote>\n<h2 dir=\"auto\">描述</h2>\n<ol dir=\"auto\">\n<li><strong>多种消息推送方式</strong>：\n<ul dir=\"auto\">\n<li>邮件消息，</li>\n<li>微信测试号，</li>\n<li>QQ，</li>\n<li>企业微信应用号，</li>\n<li>企业微信群机器人</li>\n<li>飞书自建应用</li>\n<li>飞书群机器人，</li>\n<li>钉钉群机器人，</li>\n<li>Bark App,</li>\n<li>WebSocket 客户端（<a href=\"https://github.com/songquanpeng/personal-assistant\">官方客户端</a>，<a href=\"./docs/API.md#websocket-%E5%AE%A2%E6%88%B7%E7%AB%AF\">接入文档</a>），</li>\n<li>Telegram 机器人，</li>\n<li>Discord 群机器人，</li>\n<li>腾讯云自定义告警：免费的短信提醒，</li>\n<li><strong>群组消息</strong>：可以将多个推送通道组合成一个群组，然后向群组发送消息，可以实现一次性推送到多个渠道的功能，</li>\n<li><strong>自定义消息</strong>：可以自定义消息请求 URL 和请求体格式，实现与其他服务的对接，支持<a href=\"https://iamazing.cn/page/message-pusher-common-custom-templates\" rel=\"nofollow\">众多第三方服务</a>。</li>\n</ul>\n</li>\n<li>支持<strong>自定义 Webhook，反向适配各种调用平台</strong>，你可以接入各种已有的系统，而无需修改其代码。</li>\n<li>支持在 Web 端编辑 &amp; 管理发送的消息，新消息发送后 Web 端<strong>即时刷新</strong>。</li>\n<li>支持<strong>异步</strong>消息发送。</li>\n<li>支持用户管理，支持多种用户登录注册方式：\n<ul dir=\"auto\">\n<li>邮箱登录注册以及通过邮箱进行密码重置。</li>\n<li><a href=\"https://github.com/settings/applications/new\">GitHub 开放授权</a>。</li>\n<li>微信公众号授权（需要额外部署 <a href=\"https://github.com/songquanpeng/wechat-server\">WeChat Server</a>）。</li>\n</ul>\n</li>\n<li>支持 Markdown。</li>\n<li>支持 Cloudflare Turnstile 用户校验。</li>\n<li>支持在线发布公告，设置关于界面以及页脚。</li>\n<li>API <strong>兼容</strong>其他消息推送服务，例如 <a href=\"https://sct.ftqq.com/\" rel=\"nofollow\">Server 酱</a>。</li>\n</ol>\n<h2 dir=\"auto\">用途</h2>\n<ol dir=\"auto\">\n<li><a href=\"https://github.com/songquanpeng/blog/blob/486d63e96ef7906a6c767653a20ec2d3278e9a4a/routes/user.js#L27\">整合进自己的博客系统，每当有人登录时发微信消息提醒</a>。</li>\n<li>在进行深度学习模型训练时，在每个 epoch 结束后<a href=\"https://github.com/songquanpeng/pytorch-template/blob/b2ba113659056080d3009b3014a67e977e2851bf/solver/solver.py#L223\">将关键数据发送到微信</a>以方便及时监控。</li>\n<li>在各种脚本运行结束后发消息提醒，例如<a href=\"https://github.com/songquanpeng/scripts/blob/main/star_watcher.py\">监控 GitHub Star 数量的脚本</a>，又例如<a href=\"https://github.com/songquanpeng/daily-report\">自动健康填报的脚本</a>，用来通知运行结果。</li>\n<li>为<a href=\"https://github.com/songquanpeng/personal-assistant#%E4%B8%AA%E4%BA%BA%E5%8A%A9%E7%90%86%E5%BA%94%E7%94%A8\">其他系统</a>提供消息推送功能。</li>\n</ol>\n<h2 dir=\"auto\">部署</h2>\n<h3 dir=\"auto\">通过 Docker 部署</h3>\n<p dir=\"auto\">部署：<code class=\"notranslate\">docker run -d --restart always --name message-pusher -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/message-pusher:/data justsong/message-pusher</code></p>\n<p dir=\"auto\">如果无法拉去，请将 <code class=\"notranslate\">justsong/message-pusher</code> 替换为 <code class=\"notranslate\">ghcr.io/songquanpeng/message-pusher</code>。</p>\n<p dir=\"auto\">更新：<code class=\"notranslate\">docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower -cR</code></p>\n<p dir=\"auto\">开放的端口号为 3000，之后用 Nginx 配置域名，反代以及 SSL 证书即可，具体参考<a href=\"https://iamazing.cn/page/how-to-deploy-a-website\" rel=\"nofollow\">详细部署教程</a>。</p>\n<p dir=\"auto\">数据将会保存在宿主机的 <code class=\"notranslate\">/home/ubuntu/data/message-pusher</code> 目录（只有一个 SQLite 数据库文件），请确保该目录存在且具有写入权限，或者更改为合适的目录。</p>\n<p dir=\"auto\">Nginx 的参考配置：</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"server{\n   server_name msgpusher.com;  # 请根据实际情况修改你的域名\n   \n   location / {\n          client_max_body_size  64m;\n          proxy_http_version 1.1;\n          proxy_pass http://localhost:3000;  # 请根据实际情况修改你的端口\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n          proxy_cache_bypass $http_upgrade;\n          proxy_set_header Accept-Encoding gzip;\n   }\n}\"><pre class=\"notranslate\"><code class=\"notranslate\">server{\n   server_name msgpusher.com;  # 请根据实际情况修改你的域名\n   \n   location / {\n          client_max_body_size  64m;\n          proxy_http_version 1.1;\n          proxy_pass http://localhost:3000;  # 请根据实际情况修改你的端口\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n          proxy_cache_bypass $http_upgrade;\n          proxy_set_header Accept-Encoding gzip;\n   }\n}\n</code></pre></div>\n<p dir=\"auto\">之后使用 Let's Encrypt 的 certbot 配置 HTTPS：</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# Ubuntu 安装 certbot：\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n# 生成证书 &amp; 修改 Nginx 配置\nsudo certbot --nginx\n# 根据指示进行操作\n# 重启 Nginx\nsudo service nginx restart\"><pre class=\"notranslate\"><span class=\"pl-c\"><span class=\"pl-c\">#</span> Ubuntu 安装 certbot：</span>\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 生成证书 &amp; 修改 Nginx 配置</span>\nsudo certbot --nginx\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 根据指示进行操作</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> 重启 Nginx</span>\nsudo service nginx restart</pre></div>\n<h3 dir=\"auto\">手动部署</h3>\n<ol dir=\"auto\">\n<li>从 <a href=\"https://github.com/songquanpeng/message-pusher/releases/latest\">GitHub Releases</a> 下载可执行文件或者从源码编译：\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"git clone https://github.com/songquanpeng/message-pusher.git\ncd message-pusher/web\nnpm install\nnpm run build\ncd ..\ngo mod download\ngo build -ldflags &quot;-s -w&quot; -o message-pusher\"><pre class=\"notranslate\">git clone https://github.com/songquanpeng/message-pusher.git\n<span class=\"pl-c1\">cd</span> message-pusher/web\nnpm install\nnpm run build\n<span class=\"pl-c1\">cd</span> ..\ngo mod download\ngo build -ldflags <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-s -w<span class=\"pl-pds\">\"</span></span> -o message-pusher</pre></div>\n</li>\n<li>运行：\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"chmod u+x message-pusher\n./message-pusher --port 3000 --log-dir ./logs\"><pre class=\"notranslate\">chmod u+x message-pusher\n./message-pusher --port 3000 --log-dir ./logs</pre></div>\n</li>\n<li>访问 <a href=\"http://localhost:3000/\" rel=\"nofollow\">http://localhost:3000/</a> 并登录。初始账号用户名为 <code class=\"notranslate\">root</code>，密码为 <code class=\"notranslate\">123456</code>。</li>\n</ol>\n<p dir=\"auto\">如果服务需要长久运行，只是单纯地启动是不够的，<a href=\"https://iamazing.cn/page/how-to-deploy-a-website\" rel=\"nofollow\">详细部署教程</a>。</p>\n<h3 dir=\"auto\">注意</h3>\n<p dir=\"auto\">如果需要使用 WebSocket 客户端推送功能，则 Nginx 的配置文件中 <code class=\"notranslate\">proxy_read_timeout</code> 和 <code class=\"notranslate\">proxy_send_timeout</code> 务必设置超过 1 分钟。</p>\n<p dir=\"auto\">推荐设置：</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"proxy_read_timeout 300s;\nproxy_send_timeout 300s;   \"><pre class=\"notranslate\"><code class=\"notranslate\">proxy_read_timeout 300s;\nproxy_send_timeout 300s;   \n</code></pre></div>\n<h2 dir=\"auto\">配置</h2>\n<p dir=\"auto\">系统本身仅需要下载一个可执行文件即可开始使用，无其他依赖。</p>\n<p dir=\"auto\">你可以通过设置环境变量或者命令行参数进行配置。</p>\n<p dir=\"auto\">等到系统启动后，使用 <code class=\"notranslate\">root</code> 用户登录系统并做进一步的配置，默认密码为 <code class=\"notranslate\">123456</code>。</p>\n<h3 dir=\"auto\">环境变量</h3>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">REDIS_CONN_STRING</code>：设置之后将使用 Redis 作为请求频率限制的存储，而非使用内存存储。\n<ul dir=\"auto\">\n<li>例子：<code class=\"notranslate\">REDIS_CONN_STRING=redis://default:redispw@localhost:49153</code></li>\n</ul>\n</li>\n<li><code class=\"notranslate\">SESSION_SECRET</code>：设置之后将使用固定的会话密钥，这样系统重新启动后已登录用户的 cookie 将依旧有效。\n<ul dir=\"auto\">\n<li>例子：<code class=\"notranslate\">SESSION_SECRET=random_string</code></li>\n</ul>\n</li>\n<li><code class=\"notranslate\">SQL_DSN</code>：设置之后将使用指定数据库而非 SQLite。\n<ul dir=\"auto\">\n<li>例子：<code class=\"notranslate\">SQL_DSN=root:123456@tcp(localhost:3306)/message-pusher</code></li>\n</ul>\n</li>\n</ol>\n<p dir=\"auto\">注意：使用 Docker 部署时，请使用 <code class=\"notranslate\">-e key=value</code> 设置环境变量。</p>\n<p dir=\"auto\">例子：<code class=\"notranslate\">docker run -e SESSION_SECRET=random_string ...</code></p>\n<h3 dir=\"auto\">命令行参数</h3>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">--port &lt;port_number&gt;</code>: 指定服务器监听的端口号，默认为 <code class=\"notranslate\">3000</code>。\n<ul dir=\"auto\">\n<li>例子：<code class=\"notranslate\">--port 3000</code></li>\n</ul>\n</li>\n<li><code class=\"notranslate\">--log-dir &lt;log_dir&gt;</code>: 指定日志文件夹，如果没有设置，日志将不会被保存。\n<ul dir=\"auto\">\n<li>例子：<code class=\"notranslate\">--log-dir ./logs</code></li>\n</ul>\n</li>\n<li><code class=\"notranslate\">--version</code>: 打印系统版本号并退出。</li>\n</ol>\n<h3 dir=\"auto\">进一步的配置</h3>\n<ol dir=\"auto\">\n<li>系统设置：\n<ol dir=\"auto\">\n<li>填写服务器地址。</li>\n<li>配置登录注册选项，如果系统不对外开放，请取消选择<code class=\"notranslate\">允许新用户注册</code>。</li>\n<li>配置 SMTP 服务，可以使用 QQ 邮箱的 SMTP 服务。</li>\n<li>其他配置可选，请按照页面上的指示完成配置。</li>\n</ol>\n</li>\n<li>个人设置：\n<ol dir=\"auto\">\n<li>点击<code class=\"notranslate\">更新用户信息</code>更改默认用户名和密码。</li>\n<li>点击<code class=\"notranslate\">绑定邮箱地址</code>绑定邮箱以启用邮件消息推送方式。</li>\n</ol>\n</li>\n<li>推送设置：\n<ol dir=\"auto\">\n<li>设置<code class=\"notranslate\">默认推送方式</code>，默认为通过邮件进行推送。</li>\n<li>设置<code class=\"notranslate\">推送 token</code>，用以推送 API 调用鉴权，如果不需要留空即可。</li>\n<li>设置其他推送方式，按照页面上的指示即可，完成配置后点击对应的<code class=\"notranslate\">测试</code>按钮即可测试配置是否成功。</li>\n</ol>\n</li>\n<li>其他设置：如果系统对外提供服务，本系统也提供了一定的个性化设置功能，你可以设置关于界面和页脚，以及发布公告。</li>\n</ol>\n<h2 dir=\"auto\">用法</h2>\n<ol dir=\"auto\">\n<li>消息推送 API URL：<code class=\"notranslate\">https://&lt;domain&gt;/push/&lt;username&gt;</code>\n<ul dir=\"auto\">\n<li>将上面的 <code class=\"notranslate\">&lt;domain&gt;</code> 以及 <code class=\"notranslate\">&lt;username&gt;</code> 替换为真实值，例如：<code class=\"notranslate\">https://push.mydomain.cn/push/admin</code></li>\n</ul>\n</li>\n<li><code class=\"notranslate\">GET</code> 请求方式：<code class=\"notranslate\">https://&lt;domain&gt;/push/&lt;username&gt;?title=&lt;标题&gt;&amp;description=&lt;描述&gt;&amp;content=&lt;Markdown 文本&gt;&amp;channel=&lt;推送方式&gt;&amp;token=&lt;推送 token&gt;</code>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">title</code>：选填，受限于具体的消息推送方式，其可能被忽略。</li>\n<li><code class=\"notranslate\">description</code>：必填，可以替换为 <code class=\"notranslate\">desp</code>。</li>\n<li><code class=\"notranslate\">content</code>：选填，受限于具体的消息推送方式，Markdown 语法的支持有所区别。</li>\n<li><code class=\"notranslate\">channel</code>：选填，如果不填则系统使用你在后台设置的默认推送通道。注意，此处填的是消息通道的名称，而非类型。可选的推送通道类型有：\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">email</code>：通过发送邮件的方式进行推送（使用 <code class=\"notranslate\">title</code> 或 <code class=\"notranslate\">description</code> 字段设置邮件主题，使用 <code class=\"notranslate\">content</code> 字段设置正文，支持完整的 Markdown 语法）。</li>\n<li><code class=\"notranslate\">test</code>：通过微信测试号进行推送（使用 <code class=\"notranslate\">description</code> 字段设置模板消息内容，不支持 Markdown）。</li>\n<li><code class=\"notranslate\">corp_app</code>：通过企业微信应用号进行推送（仅当使用企业微信 APP 时，如果设置了 <code class=\"notranslate\">content</code> 字段，<code class=\"notranslate\">title</code> 和 <code class=\"notranslate\">description</code> 字段会被忽略；使用微信中的企业微信插件时正常）。</li>\n<li><code class=\"notranslate\">lark_app</code>：通过飞书自建应用进行推送。</li>\n<li><code class=\"notranslate\">corp</code>：通过企业微信群机器人推送（设置 <code class=\"notranslate\">content</code> 字段则将渲染 Markdown 消息，支持 Markdown 的子集；设置 <code class=\"notranslate\">description</code> 字段则为普通文本消息）。</li>\n<li><code class=\"notranslate\">lark</code>：通过飞书群机器人进行推送（注意事项同上）。</li>\n<li><code class=\"notranslate\">ding</code>：通过钉钉群机器人进行推送（注意事项同上）。</li>\n<li><code class=\"notranslate\">bark</code>：通过 Bark 进行推送（支持 <code class=\"notranslate\">title</code> 和 <code class=\"notranslate\">description</code> 字段）。</li>\n<li><code class=\"notranslate\">client</code>：通过 WebSocket 客户端进行推送（支持 <code class=\"notranslate\">title</code> 和 <code class=\"notranslate\">description</code> 字段）。</li>\n<li><code class=\"notranslate\">telegram</code>：通过 Telegram 机器人进行推送（<code class=\"notranslate\">description</code> 或 <code class=\"notranslate\">content</code> 字段二选一，支持 Markdown 的子集）。</li>\n<li><code class=\"notranslate\">discord</code>：通过 Discord 群机器人进行推送（注意事项同上）。</li>\n<li><code class=\"notranslate\">one_api</code>：通过 OneAPI 协议推送消息到 QQ。</li>\n<li><code class=\"notranslate\">group</code>：通过预先配置的消息推送通道群组进行推送。</li>\n<li><code class=\"notranslate\">custom</code>：通过预先配置好的自定义推送通道进行推送。</li>\n<li><code class=\"notranslate\">tencent_alarm</code>：通过腾讯云监控告警进行推送，仅支持 <code class=\"notranslate\">description</code> 字段。</li>\n<li><code class=\"notranslate\">none</code>：仅保存到数据库，不做推送。</li>\n</ol>\n</li>\n<li><code class=\"notranslate\">token</code>：如果你在后台设置了推送 token，则此项必填。另外可以通过设置 HTTP <code class=\"notranslate\">Authorization</code> 头部设置此项。\n<ul dir=\"auto\">\n<li>注意令牌有两种，一种是全局鉴权令牌，一种是通道维度的令牌，前者可以鉴权任何通道，后者只能鉴权指定通道。</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">url</code>：选填，如果不填则系统自动为消息生成 URL，其内容为消息详情。</li>\n<li><code class=\"notranslate\">to</code>：选填，推送给指定用户，如果不填则默认推送给自己，受限于具体的消息推送方式，有些推送方式不支持此项。\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">@all</code>：推送给所有用户。</li>\n<li><code class=\"notranslate\">user1|user2|user3</code>：推送给多个用户，用户之间使用 <code class=\"notranslate\">|</code> 分隔。</li>\n</ol>\n</li>\n<li><code class=\"notranslate\">async</code>：选填，如果设置为 <code class=\"notranslate\">true</code> 则消息推送将在后台异步进行，返回结果包含 <code class=\"notranslate\">uuid</code> 字段，可用于后续[获取消息发送状态](./docs/API.md#通过消息 UUID 获取消息发送状态)。</li>\n<li><code class=\"notranslate\">render_mode</code>：选填，\n<ol dir=\"auto\">\n<li>如果设置为 <code class=\"notranslate\">code</code>，则消息体会被自动嵌套在代码块中进行渲染；</li>\n<li>如果设置为 <code class=\"notranslate\">raw</code>，则不进行 Markdown 解析；</li>\n<li>默认 <code class=\"notranslate\">markdown</code>，即进行 Markdown 解析。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><code class=\"notranslate\">POST</code> 请求方式：字段与上面 <code class=\"notranslate\">GET</code> 请求方式保持一致。\n<ul dir=\"auto\">\n<li>如果发送的是 JSON，HTTP Header <code class=\"notranslate\">Content-Type</code> 请务必设置为 <code class=\"notranslate\">application/json</code>，否则一律按 Form 处理。</li>\n<li>POST 请求方式下的 <code class=\"notranslate\">token</code> 字段也可以通过 URL 查询参数进行设置。</li>\n</ul>\n</li>\n</ol>\n<p dir=\"auto\"><strong>各种通道的支持程度：</strong></p>\n<markdown-accessiblity-table><table role=\"table\">\n<thead>\n<tr>\n<th align=\"center\">通道类型</th>\n<th align=\"center\"><code class=\"notranslate\">title</code></th>\n<th align=\"center\"><code class=\"notranslate\">description</code></th>\n<th align=\"center\"><code class=\"notranslate\">content</code></th>\n<th align=\"center\"><code class=\"notranslate\">url</code></th>\n<th align=\"center\"><code class=\"notranslate\">to</code></th>\n<th align=\"center\">Markdown 支持</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">email</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅️</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">test</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">corp_app</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">corp</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">lark</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">lark_app</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌️</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">ding</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">bark</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅️</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">client</code></td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">telegram</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">✅</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">discord</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"notranslate\">tencent_alarm</code></td>\n<td align=\"center\">❌</td>\n<td align=\"center\">✅</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n<td align=\"center\">❌</td>\n</tr>\n</tbody>\n</table></markdown-accessiblity-table>\n<p dir=\"auto\">注意：</p>\n<ol dir=\"auto\">\n<li>对于大部分通道，<code class=\"notranslate\">description</code> 字段和 <code class=\"notranslate\">content</code> 是不能同时存在的，如果你只需要文字消息，请使用 <code class=\"notranslate\">description</code> 字段，如果你需要发送 Markdown 消息，请使用 <code class=\"notranslate\">content</code> 字段。</li>\n<li>部分通道的 Markdown 支持实际上是通过 URL 跳转到本系统所渲染的消息详情实现的，其他通道的 Markdown 支持受限于具体的通道，支持的语法并不统一。</li>\n</ol>\n<p dir=\"auto\"><strong>示例：</strong></p>\n<details>\n<summary><strong>Bash 示例 </strong></summary>\n<div dir=\"auto\">\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#!/bin/bash\n\nMESSAGE_PUSHER_SERVER=&quot;https://msgpusher.com&quot;\nMESSAGE_PUSHER_USERNAME=&quot;test&quot;\nMESSAGE_PUSHER_TOKEN=&quot;666&quot;\n\nfunction send_message {\n  # POST Form\n  curl -s -X POST &quot;$MESSAGE_PUSHER_SERVER/push/$MESSAGE_PUSHER_USERNAME&quot; \\\n    -d &quot;title=$1&amp;description=$2&amp;content=$3&amp;token=$MESSAGE_PUSHER_TOKEN&quot; \\\n    &gt;/dev/null\n}\n\nfunction send_message_with_json {\n  # POST JSON\n  curl -s -X POST &quot;$MESSAGE_PUSHER_SERVER/push/$MESSAGE_PUSHER_USERNAME&quot; \\\n    -H 'Content-Type: application/json' \\\n    -d '{&quot;title&quot;:&quot;'&quot;$1&quot;'&quot;,&quot;desp&quot;:&quot;'&quot;$2&quot;'&quot;, &quot;content&quot;:&quot;'&quot;$3&quot;'&quot;, &quot;token&quot;:&quot;'&quot;$MESSAGE_PUSHER_TOKEN&quot;'&quot;}' \\\n    &gt;/dev/null\n}\n\nsend_message 'title' 'description' 'content'\"><pre class=\"notranslate\"><span class=\"pl-c\"><span class=\"pl-c\">#!</span>/bin/bash</span>\n\nMESSAGE_PUSHER_SERVER=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://msgpusher.com<span class=\"pl-pds\">\"</span></span>\nMESSAGE_PUSHER_USERNAME=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>\nMESSAGE_PUSHER_TOKEN=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>666<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">send_message</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> POST Form</span>\n  curl -s -X POST <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$MESSAGE_PUSHER_SERVER</span>/push/<span class=\"pl-smi\">$MESSAGE_PUSHER_USERNAME</span><span class=\"pl-pds\">\"</span></span> \\\n    -d <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>title=<span class=\"pl-smi\">$1</span>&amp;description=<span class=\"pl-smi\">$2</span>&amp;content=<span class=\"pl-smi\">$3</span>&amp;token=<span class=\"pl-smi\">$MESSAGE_PUSHER_TOKEN</span><span class=\"pl-pds\">\"</span></span> \\\n    <span class=\"pl-k\">&gt;</span>/dev/null\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">send_message_with_json</span> {\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> POST JSON</span>\n  curl -s -X POST <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$MESSAGE_PUSHER_SERVER</span>/push/<span class=\"pl-smi\">$MESSAGE_PUSHER_USERNAME</span><span class=\"pl-pds\">\"</span></span> \\\n    -H <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Content-Type: application/json<span class=\"pl-pds\">'</span></span> \\\n    -d <span class=\"pl-s\"><span class=\"pl-pds\">'</span>{\"title\":\"<span class=\"pl-pds\">'</span></span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$1</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>\",\"desp\":\"<span class=\"pl-pds\">'</span></span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$2</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>\", \"content\":\"<span class=\"pl-pds\">'</span></span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$3</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>\", \"token\":\"<span class=\"pl-pds\">'</span></span><span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$MESSAGE_PUSHER_TOKEN</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>\"}<span class=\"pl-pds\">'</span></span> \\\n    <span class=\"pl-k\">&gt;</span>/dev/null\n}\n\nsend_message <span class=\"pl-s\"><span class=\"pl-pds\">'</span>title<span class=\"pl-pds\">'</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>description<span class=\"pl-pds\">'</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>content<span class=\"pl-pds\">'</span></span></pre></div>\n<p dir=\"auto\">另一个版本：</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"MESSAGE_PUSHER_SERVER=&quot;https://msgpusher.com&quot;\nMESSAGE_PUSHER_USERNAME=&quot;test&quot;\nMESSAGE_PUSHER_TOKEN=&quot;666&quot;\nMESSAGE_PUSHER_CHANNEL=&quot;lark&quot;\n\nsendmsg() {\n    if [ -t 0 ]; then\n        local param=&quot;$*&quot;\n    else\n        local param=$(&lt;/dev/stdin)\n    fi\n    curl -s -o /dev/null --get --data-urlencode &quot;content=${param}&quot; &quot;$MESSAGE_PUSHER_SERVER/push/$MESSAGE_PUSHER_USERNAME?channel=$MESSAGE_PUSHER_CHANNEL&amp;token=$MESSAGE_PUSHER_TOKEN&quot;\n}\"><pre class=\"notranslate\">MESSAGE_PUSHER_SERVER=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://msgpusher.com<span class=\"pl-pds\">\"</span></span>\nMESSAGE_PUSHER_USERNAME=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span>\nMESSAGE_PUSHER_TOKEN=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>666<span class=\"pl-pds\">\"</span></span>\nMESSAGE_PUSHER_CHANNEL=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>lark<span class=\"pl-pds\">\"</span></span>\n\n<span class=\"pl-en\">sendmsg</span>() {\n    <span class=\"pl-k\">if</span> [ <span class=\"pl-k\">-t</span> 0 ]<span class=\"pl-k\">;</span> <span class=\"pl-k\">then</span>\n        <span class=\"pl-k\">local</span> param=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$*</span><span class=\"pl-pds\">\"</span></span>\n    <span class=\"pl-k\">else</span>\n        <span class=\"pl-k\">local</span> param=<span class=\"pl-s\"><span class=\"pl-pds\">$(</span><span class=\"pl-k\">&lt;</span>/dev/stdin<span class=\"pl-pds\">)</span></span>\n    <span class=\"pl-k\">fi</span>\n    curl -s -o /dev/null --get --data-urlencode <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>content=<span class=\"pl-smi\">${param}</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$MESSAGE_PUSHER_SERVER</span>/push/<span class=\"pl-smi\">$MESSAGE_PUSHER_USERNAME</span>?channel=<span class=\"pl-smi\">$MESSAGE_PUSHER_CHANNEL</span>&amp;token=<span class=\"pl-smi\">$MESSAGE_PUSHER_TOKEN</span><span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">之后便可以进行这样的操作：</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"uname -ra | sendmsg\"><pre class=\"notranslate\">uname -ra <span class=\"pl-k\">|</span> sendmsg</pre></div>\n</div>\n</details>\n<details>\n<summary><strong>Python 示例 </strong></summary>\n<div dir=\"auto\">\n<div class=\"highlight highlight-source-python notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import requests\n\nSERVER = &quot;https://msgpusher.com&quot;\nUSERNAME = &quot;test&quot;\nTOKEN = &quot;666&quot;\n\n\ndef send_message(title, description, content):\n    # GET 方式\n    # res = requests.get(f&quot;{SERVER}/push/{USERNAME}?title={title}&quot;\n    #                    f&quot;&amp;description={description}&amp;content={content}&amp;token={TOKEN}&quot;)\n\n    # POST 方式\n    res = requests.post(f&quot;{SERVER}/push/{USERNAME}&quot;, json={\n        &quot;title&quot;: title,\n        &quot;description&quot;: description,\n        &quot;content&quot;: content,\n        &quot;token&quot;: TOKEN\n    })\n    res = res.json()\n    if res[&quot;success&quot;]:\n        return None\n    else:\n        return res[&quot;message&quot;]\n\n\nerror = send_message(&quot;标题&quot;, &quot;描述&quot;, &quot;**Markdown 内容**&quot;)\nif error:\n    print(error)\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-s1\">requests</span>\n\n<span class=\"pl-c1\">SERVER</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"https://msgpusher.com\"</span>\n<span class=\"pl-c1\">USERNAME</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"test\"</span>\n<span class=\"pl-c1\">TOKEN</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"666\"</span>\n\n\n<span class=\"pl-k\">def</span> <span class=\"pl-en\">send_message</span>(<span class=\"pl-s1\">title</span>, <span class=\"pl-s1\">description</span>, <span class=\"pl-s1\">content</span>):\n    <span class=\"pl-c\"># GET 方式</span>\n    <span class=\"pl-c\"># res = requests.get(f\"{SERVER}/push/{USERNAME}?title={title}\"</span>\n    <span class=\"pl-c\">#                    f\"&amp;description={description}&amp;content={content}&amp;token={TOKEN}\")</span>\n\n    <span class=\"pl-c\"># POST 方式</span>\n    <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">requests</span>.<span class=\"pl-c1\">post</span>(<span class=\"pl-s\">f\"<span class=\"pl-s1\"><span class=\"pl-kos\">{</span><span class=\"pl-c1\">SERVER</span><span class=\"pl-kos\">}</span></span>/push/<span class=\"pl-s1\"><span class=\"pl-kos\">{</span><span class=\"pl-c1\">USERNAME</span><span class=\"pl-kos\">}</span></span>\"</span>, <span class=\"pl-s1\">json</span><span class=\"pl-c1\">=</span>{\n        <span class=\"pl-s\">\"title\"</span>: <span class=\"pl-s1\">title</span>,\n        <span class=\"pl-s\">\"description\"</span>: <span class=\"pl-s1\">description</span>,\n        <span class=\"pl-s\">\"content\"</span>: <span class=\"pl-s1\">content</span>,\n        <span class=\"pl-s\">\"token\"</span>: <span class=\"pl-c1\">TOKEN</span>\n    })\n    <span class=\"pl-s1\">res</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">res</span>.<span class=\"pl-c1\">json</span>()\n    <span class=\"pl-k\">if</span> <span class=\"pl-s1\">res</span>[<span class=\"pl-s\">\"success\"</span>]:\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">None</span>\n    <span class=\"pl-k\">else</span>:\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">res</span>[<span class=\"pl-s\">\"message\"</span>]\n\n\n<span class=\"pl-s1\">error</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">send_message</span>(<span class=\"pl-s\">\"标题\"</span>, <span class=\"pl-s\">\"描述\"</span>, <span class=\"pl-s\">\"**Markdown 内容**\"</span>)\n<span class=\"pl-k\">if</span> <span class=\"pl-s1\">error</span>:\n    <span class=\"pl-en\">print</span>(<span class=\"pl-s1\">error</span>)</pre></div>\n</div>\n</details>\n<details>\n<summary><strong>Go 示例 </strong></summary>\n<div dir=\"auto\">\n<div class=\"highlight highlight-source-go notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package main\n\nimport (\n   &quot;bytes&quot;\n   &quot;encoding/json&quot;\n   &quot;errors&quot;\n   &quot;fmt&quot;\n   &quot;net/http&quot;\n   &quot;net/url&quot;\n)\n\nvar serverAddress = &quot;https://msgpusher.com&quot;\nvar username = &quot;test&quot;\nvar token = &quot;666&quot;\n\ntype request struct {\n   Title       string `json:&quot;title&quot;`\n   Description string `json:&quot;description&quot;`\n   Content     string `json:&quot;content&quot;`\n   URL         string `json:&quot;url&quot;`\n   Channel     string `json:&quot;channel&quot;`\n   Token       string `json:&quot;token&quot;`\n}\n\ntype response struct {\n   Success bool   `json:&quot;success&quot;`\n   Message string `json:&quot;message&quot;`\n}\n\nfunc SendMessage(title string, description string, content string) error {\n   req := request{\n      Title:       title,\n      Description: description,\n      Content:     content,\n      Token:       token,\n   }\n   data, err := json.Marshal(req)\n   if err != nil {\n      return err\n   }\n   resp, err := http.Post(fmt.Sprintf(&quot;%s/push/%s&quot;, serverAddress, username),\n      &quot;application/json&quot;, bytes.NewBuffer(data))\n   if err != nil {\n      return err\n   }\n   var res response\n   err = json.NewDecoder(resp.Body).Decode(&amp;res)\n   if err != nil {\n      return err\n   }\n   if !res.Success {\n      return errors.New(res.Message)\n   }\n   return nil\n}\n\nfunc SendMessageWithForm(title string, description string, content string) error {\n   resp, err := http.PostForm(fmt.Sprintf(&quot;%s/push/%s&quot;, serverAddress, username),\n      url.Values{&quot;title&quot;: {title}, &quot;description&quot;: {description}, &quot;content&quot;: {content}, &quot;token&quot;: {token}})\n   if err != nil {\n      return err\n   }\n   var res response\n   err = json.NewDecoder(resp.Body).Decode(&amp;res)\n   if err != nil {\n      return err\n   }\n   if !res.Success {\n      return errors.New(res.Message)\n   }\n   return nil\n}\n\nfunc main() {\n   //err := SendMessage(&quot;标题&quot;, &quot;描述&quot;, &quot;**Markdown 内容**&quot;)\n   err := SendMessageWithForm(&quot;标题&quot;, &quot;描述&quot;, &quot;**Markdown 内容**&quot;)\n   if err != nil {\n      fmt.Println(&quot;推送失败：&quot; + err.Error())\n   } else {\n      fmt.Println(&quot;推送成功！&quot;)\n   }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">package</span> main\n\n<span class=\"pl-k\">import</span> (\n   <span class=\"pl-s\">\"bytes\"</span>\n   <span class=\"pl-s\">\"encoding/json\"</span>\n   <span class=\"pl-s\">\"errors\"</span>\n   <span class=\"pl-s\">\"fmt\"</span>\n   <span class=\"pl-s\">\"net/http\"</span>\n   <span class=\"pl-s\">\"net/url\"</span>\n)\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">serverAddress</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"https://msgpusher.com\"</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">username</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"test\"</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">token</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"666\"</span>\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">request</span> <span class=\"pl-k\">struct</span> {\n   <span class=\"pl-c1\">Title</span>       <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"title\"`</span>\n   <span class=\"pl-c1\">Description</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"description\"`</span>\n   <span class=\"pl-c1\">Content</span>     <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"content\"`</span>\n   <span class=\"pl-c1\">URL</span>         <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"url\"`</span>\n   <span class=\"pl-c1\">Channel</span>     <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"channel\"`</span>\n   <span class=\"pl-c1\">Token</span>       <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"token\"`</span>\n}\n\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">response</span> <span class=\"pl-k\">struct</span> {\n   <span class=\"pl-c1\">Success</span> <span class=\"pl-smi\">bool</span>   <span class=\"pl-s\">`json:\"success\"`</span>\n   <span class=\"pl-c1\">Message</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s\">`json:\"message\"`</span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-s1\">SendMessage</span>(<span class=\"pl-s1\">title</span> <span class=\"pl-smi\">string</span>, <span class=\"pl-s1\">description</span> <span class=\"pl-smi\">string</span>, <span class=\"pl-s1\">content</span> <span class=\"pl-smi\">string</span>) <span class=\"pl-smi\">error</span> {\n   <span class=\"pl-s1\">req</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-smi\">request</span>{\n      <span class=\"pl-s1\">Title</span>:       <span class=\"pl-s1\">title</span>,\n      <span class=\"pl-s1\">Description</span>: <span class=\"pl-s1\">description</span>,\n      <span class=\"pl-s1\">Content</span>:     <span class=\"pl-s1\">content</span>,\n      <span class=\"pl-s1\">Token</span>:       <span class=\"pl-s1\">token</span>,\n   }\n   <span class=\"pl-s1\">data</span>, <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">json</span>.<span class=\"pl-c1\">Marshal</span>(<span class=\"pl-s1\">req</span>)\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">err</span>\n   }\n   <span class=\"pl-s1\">resp</span>, <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">http</span>.<span class=\"pl-c1\">Post</span>(<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Sprintf</span>(<span class=\"pl-s\">\"%s/push/%s\"</span>, <span class=\"pl-s1\">serverAddress</span>, <span class=\"pl-s1\">username</span>),\n      <span class=\"pl-s\">\"application/json\"</span>, <span class=\"pl-s1\">bytes</span>.<span class=\"pl-c1\">NewBuffer</span>(<span class=\"pl-s1\">data</span>))\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">err</span>\n   }\n   <span class=\"pl-k\">var</span> <span class=\"pl-s1\">res</span> <span class=\"pl-smi\">response</span>\n   <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">json</span>.<span class=\"pl-c1\">NewDecoder</span>(<span class=\"pl-s1\">resp</span>.<span class=\"pl-c1\">Body</span>).<span class=\"pl-c1\">Decode</span>(<span class=\"pl-c1\">&amp;</span><span class=\"pl-s1\">res</span>)\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">err</span>\n   }\n   <span class=\"pl-k\">if</span> <span class=\"pl-c1\">!</span><span class=\"pl-s1\">res</span>.<span class=\"pl-c1\">Success</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">errors</span>.<span class=\"pl-c1\">New</span>(<span class=\"pl-s1\">res</span>.<span class=\"pl-c1\">Message</span>)\n   }\n   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-s1\">SendMessageWithForm</span>(<span class=\"pl-s1\">title</span> <span class=\"pl-smi\">string</span>, <span class=\"pl-s1\">description</span> <span class=\"pl-smi\">string</span>, <span class=\"pl-s1\">content</span> <span class=\"pl-smi\">string</span>) <span class=\"pl-smi\">error</span> {\n   <span class=\"pl-s1\">resp</span>, <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">http</span>.<span class=\"pl-c1\">PostForm</span>(<span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Sprintf</span>(<span class=\"pl-s\">\"%s/push/%s\"</span>, <span class=\"pl-s1\">serverAddress</span>, <span class=\"pl-s1\">username</span>),\n      url.<span class=\"pl-smi\">Values</span>{<span class=\"pl-s\">\"title\"</span>: {<span class=\"pl-s1\">title</span>}, <span class=\"pl-s\">\"description\"</span>: {<span class=\"pl-s1\">description</span>}, <span class=\"pl-s\">\"content\"</span>: {<span class=\"pl-s1\">content</span>}, <span class=\"pl-s\">\"token\"</span>: {<span class=\"pl-s1\">token</span>}})\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">err</span>\n   }\n   <span class=\"pl-k\">var</span> <span class=\"pl-s1\">res</span> <span class=\"pl-smi\">response</span>\n   <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">json</span>.<span class=\"pl-c1\">NewDecoder</span>(<span class=\"pl-s1\">resp</span>.<span class=\"pl-c1\">Body</span>).<span class=\"pl-c1\">Decode</span>(<span class=\"pl-c1\">&amp;</span><span class=\"pl-s1\">res</span>)\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">err</span>\n   }\n   <span class=\"pl-k\">if</span> <span class=\"pl-c1\">!</span><span class=\"pl-s1\">res</span>.<span class=\"pl-c1\">Success</span> {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">errors</span>.<span class=\"pl-c1\">New</span>(<span class=\"pl-s1\">res</span>.<span class=\"pl-c1\">Message</span>)\n   }\n   <span class=\"pl-k\">return</span> <span class=\"pl-c1\">nil</span>\n}\n\n<span class=\"pl-k\">func</span> <span class=\"pl-s1\">main</span>() {\n   <span class=\"pl-c\">//err := SendMessage(\"标题\", \"描述\", \"**Markdown 内容**\")</span>\n   <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">:=</span> <span class=\"pl-s1\">SendMessageWithForm</span>(<span class=\"pl-s\">\"标题\"</span>, <span class=\"pl-s\">\"描述\"</span>, <span class=\"pl-s\">\"**Markdown 内容**\"</span>)\n   <span class=\"pl-k\">if</span> <span class=\"pl-s1\">err</span> <span class=\"pl-c1\">!=</span> <span class=\"pl-c1\">nil</span> {\n      <span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s\">\"推送失败：\"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">err</span>.<span class=\"pl-c1\">Error</span>())\n   } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-s1\">fmt</span>.<span class=\"pl-c1\">Println</span>(<span class=\"pl-s\">\"推送成功！\"</span>)\n   }\n}</pre></div>\n</div>\n</details>\n<details>\n<summary><strong>C# 示例 </strong></summary>\n<div dir=\"auto\">\n<div class=\"highlight highlight-source-cs notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"using Newtonsoft.Json;\nusing RestSharp;\n\nnamespace Demo\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            //推送消息\n            var sendMsg = MessagePusherTool.SendMessage(&quot;标题&quot;, &quot;描述&quot;, &quot;**Markdown 内容**&quot;);\n            if(sendMsg.Success)\n            {\n                Console.WriteLine($&quot;推送成功！&quot;);\n            }\n            else\n            {\n                Console.WriteLine($&quot;推送失败：{sendMsg.Message}&quot;);\n            }\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// 消息推送工具\n    /// \n    /// &lt;para&gt;开源地址：https://github.com/songquanpeng/message-pusher&lt;/para&gt;\n    /// &lt;para&gt;支持：Framework、Net3.1、Net5、Net6&lt;/para&gt;\n    /// &lt;para&gt;引用包：&lt;/para&gt;\n    /// &lt;para&gt;dotnet add package Newtonsoft.Json -v 13.0.2&lt;/para&gt;\n    /// &lt;para&gt;dotnet add package RestSharp -v 108.0.3&lt;/para&gt;\n    /// &lt;/summary&gt;\n    public class MessagePusherTool\n    {\n        /// &lt;summary&gt;\n        /// ServerAddress\n        /// &lt;/summary&gt;\n        public const string ServerAddress = &quot;https://msgpusher.com&quot;;\n\n        /// &lt;summary&gt;\n        /// UserName\n        /// &lt;/summary&gt;\n        public const string UserName = &quot;test&quot;;\n\n        /// &lt;summary&gt;\n        /// Token\n        /// &lt;/summary&gt;\n        public const string Token = &quot;666&quot;;\n\n        /// &lt;summary&gt;\n        /// SendMessage\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;title&quot;&gt;title&lt;/param&gt;\n        /// &lt;param name=&quot;description&quot;&gt;description&lt;/param&gt;\n        /// &lt;param name=&quot;content&quot;&gt;content&lt;/param&gt;\n        public static Response SendMessage(string title, string description, string content)\n        {\n            var requestData = new Request()\n            {\n                Title = title,\n                Description = description,\n                Content = content,\n                Token = Token,\n            };\n            var url = $&quot;{ServerAddress}&quot;;\n            var client = new RestClient(url);\n            var request = new RestRequest($&quot;push/{UserName}&quot;, Method.Post);\n            request.AddJsonBody(requestData);\n            var response = client.Execute(request);\n            var responseData = response.Content;\n            var responseJson = JsonConvert.DeserializeObject&lt;Response&gt;(responseData);\n            return responseJson;\n        }\n\n        /// &lt;summary&gt;\n        /// Request\n        /// &lt;/summary&gt;\n        public class Request\n        {\n            /// &lt;summary&gt;\n            /// Title\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;title&quot;)]\n            public string Title { get; set; }\n\n            /// &lt;summary&gt;\n            /// Description\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;description&quot;)]\n            public string Description { get; set; }\n\n            /// &lt;summary&gt;\n            /// Content\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;content&quot;)]\n            public string Content { get; set; }\n\n            /// &lt;summary&gt;\n            /// URL\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;url&quot;)]\n            public string URL { get; set; }\n\n            /// &lt;summary&gt;\n            /// Channel\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;channel&quot;)]\n            public string Channel { get; set; }\n\n            /// &lt;summary&gt;\n            /// Token\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;token&quot;)]\n            public string Token { get; set; }\n        }\n\n        /// &lt;summary&gt;\n        /// Response\n        /// &lt;/summary&gt;\n        public class Response\n        {\n            /// &lt;summary&gt;\n            /// Success\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;success&quot;)]\n            public bool Success { get; set; }\n\n            /// &lt;summary&gt;\n            /// Message\n            /// &lt;/summary&gt;\n            [JsonProperty(PropertyName = &quot;message&quot;)]\n            public string Message { get; set; }\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">using</span> <span class=\"pl-s1\">Newtonsoft</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">Json</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">using</span> <span class=\"pl-s1\">RestSharp</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">namespace</span> <span class=\"pl-v\">Demo</span>\n<span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Program</span>\n    <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\"><span class=\"pl-k\">static</span></span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">Main</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">string</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">//推送消息</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">sendMsg</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">MessagePusherTool</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">SendMessage</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"标题\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"描述\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"**Markdown 内容**\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sendMsg</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">Success</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">Console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">WriteLine</span><span class=\"pl-kos\">(</span><span class=\"pl-s\"><span class=\"pl-s\">$</span>\"推送成功！\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n            <span class=\"pl-k\">else</span>\n            <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">Console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">WriteLine</span><span class=\"pl-kos\">(</span><span class=\"pl-s\"><span class=\"pl-s\">$</span>\"推送失败：<span class=\"pl-kos\">{</span><span class=\"pl-s1\">sendMsg</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">Message</span><span class=\"pl-kos\">}</span>\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-c\">/// &lt;summary&gt;</span>\n    <span class=\"pl-c\">/// 消息推送工具</span>\n    <span class=\"pl-c\">/// </span>\n    <span class=\"pl-c\">/// &lt;para&gt;开源地址：https://github.com/songquanpeng/message-pusher&lt;/para&gt;</span>\n    <span class=\"pl-c\">/// &lt;para&gt;支持：Framework、Net3.1、Net5、Net6&lt;/para&gt;</span>\n    <span class=\"pl-c\">/// &lt;para&gt;引用包：&lt;/para&gt;</span>\n    <span class=\"pl-c\">/// &lt;para&gt;dotnet add package Newtonsoft.Json -v 13.0.2&lt;/para&gt;</span>\n    <span class=\"pl-c\">/// &lt;para&gt;dotnet add package RestSharp -v 108.0.3&lt;/para&gt;</span>\n    <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MessagePusherTool</span>\n    <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// ServerAddress</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">ServerAddress</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"https://msgpusher.com\"</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// UserName</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">UserName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"test\"</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// Token</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">const</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Token</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"666\"</span><span class=\"pl-kos\">;</span>\n\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// SendMessage</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-c\">/// &lt;param name=\"title\"&gt;title&lt;/param&gt;</span>\n        <span class=\"pl-c\">/// &lt;param name=\"description\"&gt;description&lt;/param&gt;</span>\n        <span class=\"pl-c\">/// &lt;param name=\"content\"&gt;content&lt;/param&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\"><span class=\"pl-k\">static</span></span> <span class=\"pl-s1\">Response</span> <span class=\"pl-en\">SendMessage</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">string</span> <span class=\"pl-s1\">title</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">description</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">content</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">requestData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Request</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n            <span class=\"pl-kos\">{</span>\n                <span class=\"pl-s1\">Title</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">title</span><span class=\"pl-kos\">,</span>\n                <span class=\"pl-s1\">Description</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">description</span><span class=\"pl-kos\">,</span>\n                <span class=\"pl-s1\">Content</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">content</span><span class=\"pl-kos\">,</span>\n                <span class=\"pl-s1\">Token</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">Token</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">url</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\"><span class=\"pl-s\">$</span>\"<span class=\"pl-kos\">{</span><span class=\"pl-s1\">ServerAddress</span><span class=\"pl-kos\">}</span>\"</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">client</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RestClient</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">url</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">request</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RestRequest</span><span class=\"pl-kos\">(</span><span class=\"pl-s\"><span class=\"pl-s\">$</span>\"push/<span class=\"pl-kos\">{</span><span class=\"pl-s1\">UserName</span><span class=\"pl-kos\">}</span>\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">Method</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">Post</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-s1\">request</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">AddJsonBody</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">requestData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">client</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">Execute</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">request</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">responseData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-s1\">Content</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">var</span> <span class=\"pl-s1\">responseJson</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">JsonConvert</span><span class=\"pl-kos\">.</span><span class=\"pl-smi\">DeserializeObject</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-smi\">Response</span><span class=\"pl-c1\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">responseData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">responseJson</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// Request</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Request</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Title</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"title\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Title</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Description</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"description\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Description</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Content</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"content\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Content</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// URL</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"url\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">URL</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Channel</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"channel\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Channel</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Token</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"token\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Token</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n\n        <span class=\"pl-c\">/// &lt;summary&gt;</span>\n        <span class=\"pl-c\">/// Response</span>\n        <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Response</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Success</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"success\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">bool</span> <span class=\"pl-s1\">Success</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n\n            <span class=\"pl-c\">/// &lt;summary&gt;</span>\n            <span class=\"pl-c\">/// Message</span>\n            <span class=\"pl-c\">/// &lt;/summary&gt;</span>\n            <span class=\"pl-kos\">[</span><span class=\"pl-c1\">JsonProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">PropertyName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"message\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span>\n            <span class=\"pl-k\">public</span> <span class=\"pl-smi\">string</span> <span class=\"pl-s1\">Message</span> <span class=\"pl-kos\">{</span> <span class=\"pl-k\">get</span><span class=\"pl-kos\">;</span> <span class=\"pl-k\">set</span><span class=\"pl-kos\">;</span> <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</div>\n</details>\n<details>\n<summary><strong>Node.js 示例 </strong></summary>\n<div dir=\"auto\">\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const axios = require('axios');\nconst querystring = require('querystring');\n\nconst MESSAGE_PUSHER_SERVER = 'https://msgpusher.com'\nconst MESSAGE_PUSHER_USERNAME = 'test'\nconst MESSAGE_PUSHER_TOKEN = '666'\n\nasync function send_message(title, description, content) {\n  try {\n    const postData = querystring.stringify({\n      title: title,\n      desp: description,\n      content: content,\n      token: MESSAGE_PUSHER_TOKEN,\n    })\n\n    const response = await axios.post(`${MESSAGE_PUSHER_SERVER}/push/${MESSAGE_PUSHER_USERNAME}`, postData, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    })\n    if (response.data.success) {\n      return response.data\n    }\n  } catch (error) {\n    if (error.response) {\n      return error.response.data\n    } else {\n      throw error\n    }\n\n  }\n}\n\nsend_message('标题', '描述', '**Markdown 内容**')\n  .then((response) =&gt; {\n    if (response.success) {\n      console.log('推送成功:', response)\n    } else {\n      console.log('推送失败:', response)\n    }\n  }, (error) =&gt; {\n    console.log(error.message);\n  })\n\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">axios</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'axios'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">querystring</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'querystring'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">MESSAGE_PUSHER_SERVER</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'https://msgpusher.com'</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">MESSAGE_PUSHER_USERNAME</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'test'</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">MESSAGE_PUSHER_TOKEN</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'666'</span>\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">send_message</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">title</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">description</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">content</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">postData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">querystring</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">stringify</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">title</span>: <span class=\"pl-s1\">title</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">desp</span>: <span class=\"pl-s1\">description</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">content</span>: <span class=\"pl-s1\">content</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">token</span>: <span class=\"pl-c1\">MESSAGE_PUSHER_TOKEN</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-s1\">axios</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">post</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-c1\">MESSAGE_PUSHER_SERVER</span><span class=\"pl-kos\">}</span></span>/push/<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-c1\">MESSAGE_PUSHER_USERNAME</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">postData</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">'Content-Type'</span>: <span class=\"pl-s\">'application/x-www-form-urlencoded'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">success</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">data</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">error</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">data</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">throw</span> <span class=\"pl-s1\">error</span>\n    <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">send_message</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'标题'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'描述'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'**Markdown 内容**'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">success</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'推送成功:'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'推送失败:'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">error</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">message</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n</div>\n</details>\n<p dir=\"auto\">欢迎 PR 添加更多语言的示例。</p>\n<h2 dir=\"auto\">迁移数据库</h2>\n<p dir=\"auto\">此处均以 SQLite 为例，其他数据库请自行修改。我已经让 ChatGPT 翻译成对应的 SQL 版本，见 <code class=\"notranslate\">bin</code> 文件夹，供参考。</p>\n<h3 dir=\"auto\">从 <code class=\"notranslate\">v0.3</code> 迁移到 <code class=\"notranslate\">v0.4</code></h3>\n<ol dir=\"auto\">\n<li>首先备份你的数据库文件。</li>\n<li>下载最新的 <code class=\"notranslate\">v0.4</code> 版本，启动程序，程序会自动进行数据库表结构的迁移。</li>\n<li>终止程序。</li>\n<li>之后执行脚本：<code class=\"notranslate\">./bin/migrate_v3_to_v4.py</code>，进行数据的迁移。</li>\n<li>重新启动程序即可。</li>\n</ol>\n<p dir=\"auto\">注意，执行前请确保数据库中 <code class=\"notranslate\">users</code> 表中字段的顺序和脚本中的一致，否则会出现数据错乱的情况。</p>\n<h2 dir=\"auto\">其他</h2>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">v0.3</code> 之前的版本基于 Node.js，你可以切换到 <a href=\"https://github.com/songquanpeng/message-pusher/tree/nodejs\"><code class=\"notranslate\">nodejs</code></a> 分支查看，该版本不再有功能性更新。</li>\n<li><code class=\"notranslate\">v0.3</code> 以及后续版本基于 Gin Template <a href=\"https://github.com/songquanpeng/gin-template\"><code class=\"notranslate\">v0.2.1</code></a> 版本开发。</li>\n<li>如果想要自行编译，请首先<a href=\"./web/README.md\">编译前端</a>，之后再编译后端，否则会遇到 <code class=\"notranslate\">pattern web/build: no matching files found</code> 问题。</li>\n</ol>","updatedAt":"2025-05-21T16:11:32Z","upvoteCount":null,"author":{"login":"eryajf","avatarUrl":"https://avatars.githubusercontent.com/u/33259379?u=e4a4090a38ac2473aaed4ef9945233636776c6c3&v=4","url":"https://github.com/eryajf"},"category":null,"labels":{"edges":[{"node":{"name":"更多","color":"25B472"}},{"node":{"name":"Notification","color":"b5f820"}},{"node":{"name":"songquanpeng","color":"9a2057"}}]},"comments":{"edges":[]}}},"pageContext":{"number":371,"previous":{"title":"usememos/memos: 一项隐私优先的轻量级笔记服务, 轻松捕捉并分享您的精彩想法, [flomo](https://flomoapp.com/) 的开源替代品","number":370},"next":{"title":"metersphere/metersphere:  一站式开源持续测试平台，涵盖测试跟踪、接口测试、UI 测试和性能测试等功能，全面兼容 JMeter、Selenium 等主流开源标准 ","number":372}}},
    "staticQueryHashes": ["151096407","2861350382"]}